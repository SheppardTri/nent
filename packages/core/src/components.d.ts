/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { EventAction } from "./services/actions";
import { RouterService } from "./services/routing/router";
import { AudioActionListener } from "./components/x-audio/audio/actions";
import { AudioInfo, AudioRequest } from "./components/x-audio/audio/interfaces";
import { ReferenceCompleteResults } from "./services/content";
import { CookieConsent } from "./components/x-data-provider-cookie/cookie/interfaces";
import { SetData } from "./components/x-data/data/interfaces";
import { VideoTimer } from "./components/x-video/video/timer";
export namespace Components {
    interface XAction {
        /**
          * The command to execute.
         */
        "command": string;
        /**
          * Get the underlying actionEvent instance. Used by the x-action-activator element.
         */
        "getAction": () => Promise<EventAction<any> | null>;
        /**
          * Send this action to the the action messaging system.
         */
        "sendAction": (data?: Record<string, any> | undefined) => Promise<void>;
        /**
          * This is the topic this action-command is targeting.
         */
        "topic": string;
    }
    interface XActionActivator {
        /**
          * The activation strategy to use for the contained actions.
         */
        "activate": | 'on-element-event'
    | 'on-enter'
    | 'at-time'
    | 'on-exit';
        /**
          * Manually activate all actions within this activator.
         */
        "activateActions": () => Promise<void>;
        /**
          * Turn on debug statements for load, update and render events.
         */
        "debug": boolean;
        /**
          * Limit the activation to ONCE. This could be helpful if an action has side-effects if it is run multiple times.  Note: the activation state is stored in memory and does not persist across refreshes.
         */
        "once": boolean;
        /**
          * The element to watch for events when using the OnElementEvent activation strategy. This element uses the HTML Element querySelector function to find the element.  For use with activate="on-element-event" Only!
         */
        "targetElement"?: string;
        /**
          * This is the name of the event/s to listen to on the target element separated by comma.
         */
        "targetEvent": string;
        /**
          * The time, in seconds at which the contained actions should be submitted.  For use with activate="at-time" Only!
         */
        "time"?: number;
    }
    interface XApp {
        /**
          * This is the application / site title. If the views or dos have titles, this is added as a suffix.
         */
        "appTitle"?: string;
        /**
          * Turn on debugging to get helpful messages from the routing, data and action systems.
         */
        "debug": boolean;
        /**
          * This is the root path that the actual page is, if it isn't '/', then the router needs to know where to begin creating paths.
         */
        "root": string;
        /**
          * This is the router service instantiated with this component.
         */
        "router": RouterService;
        /**
          * Header height or offset for scroll-top on this and all views.
         */
        "scrollTopOffset"?: number;
        /**
          * This is the start path a user should land on when they first land on this app.
         */
        "startUrl": string;
        /**
          * Navigation transition between routes. This is a CSS animation class.
         */
        "transition"?: string;
    }
    interface XAppAnalytics {
    }
    interface XAppLink {
        /**
          * The class to add when this HREF is active in the browser
         */
        "activeClass": string;
        /**
          * Provide log messages for path matching.
         */
        "debug": boolean;
        /**
          * Only active on the exact href match, and not on child routes
         */
        "exact": boolean;
        /**
          * The destination route for this link
         */
        "href": string;
        /**
          * Only active on the exact href match using every aspect of the URL including parameters.
         */
        "strict": boolean;
    }
    interface XAppView {
        /**
          * Remote URL for this Route's content.
         */
        "contentSrc"?: string;
        /**
          * Turn on debug statements for load, update and render events.
         */
        "debug": boolean;
        /**
          * The url for this route should only be matched when it is exact.
         */
        "exact": boolean;
        /**
          * Return all child elements used for processing. This function is primarily meant for testing.
         */
        "getChildren": () => Promise<{ activators: HTMLXActionActivatorElement[]; views: HTMLXAppViewElement[]; dos: HTMLXAppViewDoElement[]; }>;
        /**
          * Cross Origin Mode if the content is pulled from a remote location
         */
        "mode": 'cors' | 'navigate' | 'no-cors' | 'same-origin';
        /**
          * The title for this view. This is prefixed before the app title configured in x-app
         */
        "pageTitle": string;
        /**
          * Before rendering remote HTML, replace any data-tokens with their resolved values. This also commands this component to re-render it's HTML for data-changes. This can affect performance.  IMPORTANT: ONLY WORKS ON REMOTE HTML
         */
        "resolveTokens": boolean;
        /**
          * The router-service instance  (internal)
         */
        "router": RouterService;
        /**
          * Header height or offset for scroll-top on this view.
         */
        "scrollTopOffset": number;
        /**
          * Remote URL for this route's HTML. HTML from this URL will be not be assigned to any slot.  You can add slot='content' to any containers within this HTML if you have a mix of HTML for this exact-route and its children.
         */
        "src"?: string;
        /**
          * Navigation transition between routes. This is a CSS animation class.
         */
        "transition"?: string;
        /**
          * The url for this route, including the parent's routes.
         */
        "url": string;
    }
    interface XAppViewDo {
        /**
          * Remote URL for HTML content. Content from this URL will be assigned the 'content' slot.
         */
        "contentSrc"?: string;
        /**
          * To debug timed elements, set this value to true.
         */
        "debug": boolean;
        /**
          * The url for this route should only be matched when it is exact.
         */
        "exact": boolean;
        /**
          * Cross Origin Mode if the content is pulled from a remote location
         */
        "mode": 'cors' | 'navigate' | 'no-cors' | 'same-origin';
        /**
          * When this value exists, the page will automatically progress when the duration in seconds has passed.
         */
        "nextAfter"?: number | boolean;
        /**
          * The title for this view. This is prefixed before the app title configured in x-app
         */
        "pageTitle": string;
        /**
          * Before rendering remote HTML, replace any data-tokens with their resolved values. This also commands this component to re-render it's HTML for data-changes. This can affect performance.  IMPORTANT: ONLY WORKS ON REMOTE HTML
         */
        "resolveTokens": boolean;
        /**
          * Header height or offset for scroll-top on this view.
         */
        "scrollTopOffset"?: number;
        /**
          * Navigation transition between routes. This is a CSS animation class.
         */
        "transition"?: string;
        /**
          * The url for this route, including the parent's routes.
         */
        "url": string;
        /**
          * The visit strategy for this do. once: persist the visit and never force it again always: do not persist, but don't don't show again in-session optional: do not force this view-do ever. It will be available by URL
         */
        "visit": 'once' | 'always' | 'optional';
        /**
          * If present, the expression must evaluate to true for this route to be sequenced by the parent view. The existence of this value overrides the visit strategy
         */
        "when"?: string;
    }
    interface XAppViewList {
        /**
          * The active-class to use with the x-app-link components.
         */
        "activeClass"?: string;
        /**
          * Specify if the '/' route should be skipped in the list.
         */
        "excludeRoot": boolean;
        /**
          * The list-item-class to use with the li tag
         */
        "itemClass"?: string;
        /**
          * The list-class to use with the UL tag
         */
        "listClass"?: string;
        /**
          * The display mode for which routes to display.
         */
        "mode": 'children' | 'parents' | 'siblings';
        /**
          * The router-service instance  (internal)
         */
        "router"?: RouterService;
        /**
          * The string separator to put between the items.
         */
        "separator"?: string;
    }
    interface XAppViewNotFound {
        /**
          * The title for this view. This is prefixed before the app title configured in x-app
         */
        "pageTitle": string;
        /**
          * The router-service instance  (internal)
         */
        "router": RouterService;
        /**
          * Header height or offset for scroll-top on this view.
         */
        "scrollTopOffset": number;
        /**
          * Navigation transition between routes. This is a CSS animation class.
         */
        "transition"?: string;
    }
    interface XAudio {
        /**
          * A reference to the action listener for testing.
         */
        "actions"?: AudioActionListener;
        /**
          * Experimental support for providing audio-data in the data-provider system.
         */
        "dataProvider": boolean;
        /**
          * Use debug for verbose logging. Useful for figuring thing out.
         */
        "debug": boolean;
        /**
          * The display mode enabled shows player state and stats. No track information or duration is be displayed.
         */
        "display": boolean;
        /**
          * The Howler.js Script Reference
         */
        "howlerVersion": string;
    }
    interface XAudioMusicAction {
        /**
          * The command to execute.
         */
        "command": | 'start'
    | 'pause'
    | 'resume'
    | 'mute'
    | 'volume'
    | 'seek';
        /**
          * Get the underlying actionEvent instance. Used by the x-action-activator element.
         */
        "getAction": () => Promise<EventAction<any>>;
        /**
          * Send this action to the the action messaging system.
         */
        "sendAction": (data?: Record<string, any> | undefined) => Promise<void>;
        /**
          * Readonly topic
         */
        "topic": "audio";
        /**
          * The track to target.
         */
        "trackId"?: string;
        /**
          * The value payload for the command.
         */
        "value"?: string | boolean | number;
    }
    interface XAudioMusicLoad {
        /**
          * If set, disables auto-rendering of this instance. To fetch the contents change to false or remove attribute.
         */
        "deferLoad": boolean;
        /**
          * The discard strategy the player should use for this file.
         */
        "discard": 'route' | 'next' | 'none';
        /**
          * Get the underlying actionEvent instance.
         */
        "getAction": () => Promise<EventAction<AudioInfo | AudioRequest | any>>;
        /**
          * Set this to true to have the audio file loop.
         */
        "loop": boolean;
        /**
          * This is loading strategy that determines what is should do after the file is retrieved.
         */
        "mode": 'queue' | 'play' | 'load';
        /**
          * Send this action to the the action messaging system.
         */
        "sendAction": (data?: Record<string, any> | undefined) => Promise<void>;
        /**
          * The path to the audio-file.
          * @required
         */
        "src": string;
        /**
          * The identifier for this music track
         */
        "trackId": string;
    }
    interface XAudioSoundAction {
        /**
          * The command to execute.
         */
        "command": | 'start'
    | 'pause'
    | 'resume'
    | 'mute'
    | 'volume'
    | 'seek';
        /**
          * Get the underlying actionEvent instance. Used by the x-action-activator element.
         */
        "getAction": () => Promise<EventAction<any>>;
        /**
          * Send this action to the the action messaging system.
         */
        "sendAction": (data?: Record<string, any> | undefined) => Promise<void>;
        /**
          * Readonly topic
         */
        "topic": "audio";
        /**
          * The track to target.
         */
        "trackId"?: string;
        /**
          * The value payload for the command.
         */
        "value"?: string | boolean | number;
    }
    interface XAudioSoundLoad {
        /**
          * If set, disables auto-rendering of this instance. To fetch the contents change to false or remove attribute.
         */
        "deferLoad": boolean;
        /**
          * The discard strategy the player should use for this file.
         */
        "discard": 'route' | 'next' | 'none';
        /**
          * Get the underlying actionEvent instance.
         */
        "getAction": () => Promise<EventAction<AudioInfo | AudioRequest | any>>;
        /**
          * This is loading strategy that determines what is should do after the file is retrieved.
         */
        "mode": 'queue' | 'play' | 'load';
        /**
          * Send this action to the the action messaging system.
         */
        "sendAction": (data?: Record<string, any> | undefined) => Promise<void>;
        /**
          * The path to the audio-file.
         */
        "src": string;
        /**
          * The identifier for this music track
         */
        "trackId": string;
    }
    interface XAudioStateSwitch {
        /**
          * Any classes to add to the input-element directly.
         */
        "classes"?: string;
        /**
          * The data provider to store the audio state in.
         */
        "dataProvider": string;
        /**
          * The id field to add to the input-element directly.
         */
        "inputId"?: string;
        /**
          * Which state property this switch controls.
         */
        "setting": 'muted' | 'enabled';
    }
    interface XContent {
        /**
          * If set, disables auto-rendering of this instance. To fetch the contents change to false or remove attribute.
         */
        "deferLoad": boolean;
        /**
          * Cross Origin Mode
         */
        "mode": 'cors' | 'navigate' | 'no-cors' | 'same-origin';
        /**
          * Before rendering HTML, replace any data-tokens with their resolved values. This also commands this component to re-render it's HTML for data-changes. This can affect performance.
         */
        "resolveTokens": boolean;
        /**
          * Remote Template URL
         */
        "src": string;
        /**
          * A data-token predicate to advise this component when to render (useful if used in a dynamic route or if tokens are used in the 'src' attribute)
         */
        "when"?: string;
    }
    interface XContentMarkdown {
        /**
          * If set, disables auto-rendering of this instance. To fetch the contents change to false or remove attribute.
         */
        "deferLoad": boolean;
        /**
          * Cross Origin Mode
         */
        "mode": 'cors' | 'navigate' | 'no-cors' | 'same-origin';
        /**
          * Force render with data & route changes.
         */
        "noCache": boolean;
        /**
          * Before rendering HTML, replace any data-tokens with their resolved values. This also commands this component to re-render it's HTML for data-changes. This can affect performance.
         */
        "resolveTokens": boolean;
        /**
          * Remote Template URL
         */
        "src"?: string;
        /**
          * A data-token predicate to advise this component when to render (useful if used in a dynamic route or if tokens are used in the 'src' attribute)
         */
        "when"?: string;
    }
    interface XContentReference {
        /**
          * If set, disables auto-rendering of this instance. To fetch the contents change to false or remove attribute.
         */
        "deferLoad": boolean;
        /**
          * Force the 'load' event of the script or link element. This is meant for testing.
         */
        "forceLoad": () => Promise<void>;
        /**
          * When inline the link/script tags are rendered in-place rather than added to the head.
         */
        "inline": boolean;
        /**
          * Import the script file as a module.
         */
        "module": boolean;
        /**
          * Declare the script only for use when modules aren't supported
         */
        "noModule": boolean;
        /**
          * The script file to reference.
         */
        "scriptSrc"?: string;
        /**
          * The css file to reference
         */
        "styleSrc"?: string;
        /**
          * Timeout (in milliseconds) to wait for the references to load.
         */
        "timeout": number;
    }
    interface XContentReveal {
        /**
          * How far the element moves in the animation (% of element width/height)
         */
        "animationDistance": string;
        /**
          * How long to delay the animation (ms)
         */
        "delay": number;
        /**
          * Direction the element moves when animating in
         */
        "direction": 'up' | 'down' | 'right' | 'left';
        /**
          * How long the animation runs (ms)
         */
        "duration": number;
        /**
          * How much of the element must be visible before it animates (% of element height)
         */
        "triggerDistance": string;
    }
    interface XContentShare {
        /**
          * Headline for the share
         */
        "headline"?: string;
        /**
          * The textual body of web share
         */
        "text"?: string;
        /**
          * The URL we are sharing
         */
        "url"?: string;
    }
    interface XData {
        /**
          * The wait-time, in milliseconds to wait for un-registered data providers found in an expression. This is to accommodate a possible lag between evaluation before the first view-do 'when' predicate an the registration process.
          * @system data
         */
        "providerTimeout": number;
    }
    interface XDataDisplay {
        /**
          * If set, disables auto-rendering of this instance. To fetch the contents change to false or remove attribute.
         */
        "deferLoad": boolean;
        /**
          * The data expression to obtain a value for rendering as inner-text for this element. {{session:user.name}}
          * @default null
         */
        "text"?: string;
    }
    interface XDataProviderCookie {
        /**
          * Provider name to use in nent expressions.
         */
        "name": string;
        /**
          * Immediately register the provider.
         */
        "registerProvider": () => Promise<void>;
        /**
          * When skipConsent is true, the accept-cookies banner will not be displayed before accessing cookie-data.
         */
        "skipConsent": boolean;
    }
    interface XDataProviderSession {
        /**
          * The key prefix to use in storage
         */
        "keyPrefix"?: string;
        /**
          * Provider name to use in nent expressions.
         */
        "name": string;
    }
    interface XDataProviderStorage {
        /**
          * The key prefix to use in storage
         */
        "keyPrefix"?: string;
        /**
          * Provider name to use in nent expressions.
         */
        "name": string;
    }
    interface XDataRepeat {
        /**
          * Turn on debug statements for load, update and render events.
         */
        "debug": boolean;
        /**
          * If set, disables auto-rendering of this instance. To fetch the contents change to false or remove attribute.
         */
        "deferLoad": boolean;
        /**
          * The JSONata query to filter the json items see <https://try.jsonata.org> for more info.
         */
        "filter"?: string;
        /**
          * The array-string or data expression to obtain a collection for rendering the template. {{session:cart.items}}
         */
        "items"?: string;
        /**
          * The URL to remote JSON collection to use for the items.
          * @example /data.json
         */
        "itemsSrc"?: string;
        /**
          * Force render with data & route changes.
         */
        "noCache": boolean;
        /**
          * A data-token predicate to advise this component when to render (useful if used in a dynamic route or if tokens are used in the 'src' attribute)
         */
        "when"?: string;
    }
    interface XDataShow {
        /**
          * The data expression to obtain a predicate for conditionally rendering the inner-contents of this element.
         */
        "when": string;
    }
    interface XElements {
    }
    interface XUi {
    }
    interface XUiTheme {
        /**
          * Change the class name that is added to the body tag when the theme is determined to be dark.
         */
        "darkClass": string;
        /**
          * Skip adding the class to the body tag, just update the ui state.
         */
        "skipClass": boolean;
    }
    interface XUiThemeSwitch {
        /**
          * The class to add to the inner input.
         */
        "classes"?: string;
        /**
          * The inner input ID
         */
        "inputId"?: string;
    }
    interface XVideo {
        /**
          * To debug timed elements, set this value to true.
         */
        "debug": boolean;
        /**
          * Provide the element property name that holds the duration time in seconds. Default is duration
         */
        "durationProperty": string;
        /**
          * Provider the end event name. Default is ended
         */
        "endEvent": string;
        /**
          * Provide the element selector for the media object that can provide time-updates and media-end events.
         */
        "targetElement": string;
        /**
          * Provide the time-event name. Default is timeupdate
         */
        "timeEvent": string;
        /**
          * Provide the element property name that holds the current time in seconds. Default is currentTime
         */
        "timeProperty": string;
        /**
          * Normalized video event timer.
         */
        "timer"?: VideoTimer;
    }
    interface XVideoAutoplay {
        /**
          * Controls the video auto-play setting.
         */
        "enabled": boolean;
    }
    interface XVideoAutoplaySwitch {
        /**
          * Any classes to add to the input-element directly.
         */
        "classes"?: string;
        /**
          * The data provider to store the audio-enabled state in.
         */
        "dataProvider": string;
        /**
          * The id field to add to the input-element directly.
         */
        "inputId"?: string;
    }
}
declare global {
    interface HTMLXActionElement extends Components.XAction, HTMLStencilElement {
    }
    var HTMLXActionElement: {
        prototype: HTMLXActionElement;
        new (): HTMLXActionElement;
    };
    interface HTMLXActionActivatorElement extends Components.XActionActivator, HTMLStencilElement {
    }
    var HTMLXActionActivatorElement: {
        prototype: HTMLXActionActivatorElement;
        new (): HTMLXActionActivatorElement;
    };
    interface HTMLXAppElement extends Components.XApp, HTMLStencilElement {
    }
    var HTMLXAppElement: {
        prototype: HTMLXAppElement;
        new (): HTMLXAppElement;
    };
    interface HTMLXAppAnalyticsElement extends Components.XAppAnalytics, HTMLStencilElement {
    }
    var HTMLXAppAnalyticsElement: {
        prototype: HTMLXAppAnalyticsElement;
        new (): HTMLXAppAnalyticsElement;
    };
    interface HTMLXAppLinkElement extends Components.XAppLink, HTMLStencilElement {
    }
    var HTMLXAppLinkElement: {
        prototype: HTMLXAppLinkElement;
        new (): HTMLXAppLinkElement;
    };
    interface HTMLXAppViewElement extends Components.XAppView, HTMLStencilElement {
    }
    var HTMLXAppViewElement: {
        prototype: HTMLXAppViewElement;
        new (): HTMLXAppViewElement;
    };
    interface HTMLXAppViewDoElement extends Components.XAppViewDo, HTMLStencilElement {
    }
    var HTMLXAppViewDoElement: {
        prototype: HTMLXAppViewDoElement;
        new (): HTMLXAppViewDoElement;
    };
    interface HTMLXAppViewListElement extends Components.XAppViewList, HTMLStencilElement {
    }
    var HTMLXAppViewListElement: {
        prototype: HTMLXAppViewListElement;
        new (): HTMLXAppViewListElement;
    };
    interface HTMLXAppViewNotFoundElement extends Components.XAppViewNotFound, HTMLStencilElement {
    }
    var HTMLXAppViewNotFoundElement: {
        prototype: HTMLXAppViewNotFoundElement;
        new (): HTMLXAppViewNotFoundElement;
    };
    interface HTMLXAudioElement extends Components.XAudio, HTMLStencilElement {
    }
    var HTMLXAudioElement: {
        prototype: HTMLXAudioElement;
        new (): HTMLXAudioElement;
    };
    interface HTMLXAudioMusicActionElement extends Components.XAudioMusicAction, HTMLStencilElement {
    }
    var HTMLXAudioMusicActionElement: {
        prototype: HTMLXAudioMusicActionElement;
        new (): HTMLXAudioMusicActionElement;
    };
    interface HTMLXAudioMusicLoadElement extends Components.XAudioMusicLoad, HTMLStencilElement {
    }
    var HTMLXAudioMusicLoadElement: {
        prototype: HTMLXAudioMusicLoadElement;
        new (): HTMLXAudioMusicLoadElement;
    };
    interface HTMLXAudioSoundActionElement extends Components.XAudioSoundAction, HTMLStencilElement {
    }
    var HTMLXAudioSoundActionElement: {
        prototype: HTMLXAudioSoundActionElement;
        new (): HTMLXAudioSoundActionElement;
    };
    interface HTMLXAudioSoundLoadElement extends Components.XAudioSoundLoad, HTMLStencilElement {
    }
    var HTMLXAudioSoundLoadElement: {
        prototype: HTMLXAudioSoundLoadElement;
        new (): HTMLXAudioSoundLoadElement;
    };
    interface HTMLXAudioStateSwitchElement extends Components.XAudioStateSwitch, HTMLStencilElement {
    }
    var HTMLXAudioStateSwitchElement: {
        prototype: HTMLXAudioStateSwitchElement;
        new (): HTMLXAudioStateSwitchElement;
    };
    interface HTMLXContentElement extends Components.XContent, HTMLStencilElement {
    }
    var HTMLXContentElement: {
        prototype: HTMLXContentElement;
        new (): HTMLXContentElement;
    };
    interface HTMLXContentMarkdownElement extends Components.XContentMarkdown, HTMLStencilElement {
    }
    var HTMLXContentMarkdownElement: {
        prototype: HTMLXContentMarkdownElement;
        new (): HTMLXContentMarkdownElement;
    };
    interface HTMLXContentReferenceElement extends Components.XContentReference, HTMLStencilElement {
    }
    var HTMLXContentReferenceElement: {
        prototype: HTMLXContentReferenceElement;
        new (): HTMLXContentReferenceElement;
    };
    interface HTMLXContentRevealElement extends Components.XContentReveal, HTMLStencilElement {
    }
    var HTMLXContentRevealElement: {
        prototype: HTMLXContentRevealElement;
        new (): HTMLXContentRevealElement;
    };
    interface HTMLXContentShareElement extends Components.XContentShare, HTMLStencilElement {
    }
    var HTMLXContentShareElement: {
        prototype: HTMLXContentShareElement;
        new (): HTMLXContentShareElement;
    };
    interface HTMLXDataElement extends Components.XData, HTMLStencilElement {
    }
    var HTMLXDataElement: {
        prototype: HTMLXDataElement;
        new (): HTMLXDataElement;
    };
    interface HTMLXDataDisplayElement extends Components.XDataDisplay, HTMLStencilElement {
    }
    var HTMLXDataDisplayElement: {
        prototype: HTMLXDataDisplayElement;
        new (): HTMLXDataDisplayElement;
    };
    interface HTMLXDataProviderCookieElement extends Components.XDataProviderCookie, HTMLStencilElement {
    }
    var HTMLXDataProviderCookieElement: {
        prototype: HTMLXDataProviderCookieElement;
        new (): HTMLXDataProviderCookieElement;
    };
    interface HTMLXDataProviderSessionElement extends Components.XDataProviderSession, HTMLStencilElement {
    }
    var HTMLXDataProviderSessionElement: {
        prototype: HTMLXDataProviderSessionElement;
        new (): HTMLXDataProviderSessionElement;
    };
    interface HTMLXDataProviderStorageElement extends Components.XDataProviderStorage, HTMLStencilElement {
    }
    var HTMLXDataProviderStorageElement: {
        prototype: HTMLXDataProviderStorageElement;
        new (): HTMLXDataProviderStorageElement;
    };
    interface HTMLXDataRepeatElement extends Components.XDataRepeat, HTMLStencilElement {
    }
    var HTMLXDataRepeatElement: {
        prototype: HTMLXDataRepeatElement;
        new (): HTMLXDataRepeatElement;
    };
    interface HTMLXDataShowElement extends Components.XDataShow, HTMLStencilElement {
    }
    var HTMLXDataShowElement: {
        prototype: HTMLXDataShowElement;
        new (): HTMLXDataShowElement;
    };
    interface HTMLXElementsElement extends Components.XElements, HTMLStencilElement {
    }
    var HTMLXElementsElement: {
        prototype: HTMLXElementsElement;
        new (): HTMLXElementsElement;
    };
    interface HTMLXUiElement extends Components.XUi, HTMLStencilElement {
    }
    var HTMLXUiElement: {
        prototype: HTMLXUiElement;
        new (): HTMLXUiElement;
    };
    interface HTMLXUiThemeElement extends Components.XUiTheme, HTMLStencilElement {
    }
    var HTMLXUiThemeElement: {
        prototype: HTMLXUiThemeElement;
        new (): HTMLXUiThemeElement;
    };
    interface HTMLXUiThemeSwitchElement extends Components.XUiThemeSwitch, HTMLStencilElement {
    }
    var HTMLXUiThemeSwitchElement: {
        prototype: HTMLXUiThemeSwitchElement;
        new (): HTMLXUiThemeSwitchElement;
    };
    interface HTMLXVideoElement extends Components.XVideo, HTMLStencilElement {
    }
    var HTMLXVideoElement: {
        prototype: HTMLXVideoElement;
        new (): HTMLXVideoElement;
    };
    interface HTMLXVideoAutoplayElement extends Components.XVideoAutoplay, HTMLStencilElement {
    }
    var HTMLXVideoAutoplayElement: {
        prototype: HTMLXVideoAutoplayElement;
        new (): HTMLXVideoAutoplayElement;
    };
    interface HTMLXVideoAutoplaySwitchElement extends Components.XVideoAutoplaySwitch, HTMLStencilElement {
    }
    var HTMLXVideoAutoplaySwitchElement: {
        prototype: HTMLXVideoAutoplaySwitchElement;
        new (): HTMLXVideoAutoplaySwitchElement;
    };
    interface HTMLElementTagNameMap {
        "x-action": HTMLXActionElement;
        "x-action-activator": HTMLXActionActivatorElement;
        "x-app": HTMLXAppElement;
        "x-app-analytics": HTMLXAppAnalyticsElement;
        "x-app-link": HTMLXAppLinkElement;
        "x-app-view": HTMLXAppViewElement;
        "x-app-view-do": HTMLXAppViewDoElement;
        "x-app-view-list": HTMLXAppViewListElement;
        "x-app-view-not-found": HTMLXAppViewNotFoundElement;
        "x-audio": HTMLXAudioElement;
        "x-audio-music-action": HTMLXAudioMusicActionElement;
        "x-audio-music-load": HTMLXAudioMusicLoadElement;
        "x-audio-sound-action": HTMLXAudioSoundActionElement;
        "x-audio-sound-load": HTMLXAudioSoundLoadElement;
        "x-audio-state-switch": HTMLXAudioStateSwitchElement;
        "x-content": HTMLXContentElement;
        "x-content-markdown": HTMLXContentMarkdownElement;
        "x-content-reference": HTMLXContentReferenceElement;
        "x-content-reveal": HTMLXContentRevealElement;
        "x-content-share": HTMLXContentShareElement;
        "x-data": HTMLXDataElement;
        "x-data-display": HTMLXDataDisplayElement;
        "x-data-provider-cookie": HTMLXDataProviderCookieElement;
        "x-data-provider-session": HTMLXDataProviderSessionElement;
        "x-data-provider-storage": HTMLXDataProviderStorageElement;
        "x-data-repeat": HTMLXDataRepeatElement;
        "x-data-show": HTMLXDataShowElement;
        "x-elements": HTMLXElementsElement;
        "x-ui": HTMLXUiElement;
        "x-ui-theme": HTMLXUiThemeElement;
        "x-ui-theme-switch": HTMLXUiThemeSwitchElement;
        "x-video": HTMLXVideoElement;
        "x-video-autoplay": HTMLXVideoAutoplayElement;
        "x-video-autoplay-switch": HTMLXVideoAutoplaySwitchElement;
    }
}
declare namespace LocalJSX {
    interface XAction {
        /**
          * The command to execute.
         */
        "command": string;
        /**
          * This is the topic this action-command is targeting.
         */
        "topic": string;
    }
    interface XActionActivator {
        /**
          * The activation strategy to use for the contained actions.
         */
        "activate"?: | 'on-element-event'
    | 'on-enter'
    | 'at-time'
    | 'on-exit';
        /**
          * Turn on debug statements for load, update and render events.
         */
        "debug"?: boolean;
        /**
          * Limit the activation to ONCE. This could be helpful if an action has side-effects if it is run multiple times.  Note: the activation state is stored in memory and does not persist across refreshes.
         */
        "once"?: boolean;
        /**
          * The element to watch for events when using the OnElementEvent activation strategy. This element uses the HTML Element querySelector function to find the element.  For use with activate="on-element-event" Only!
         */
        "targetElement"?: string;
        /**
          * This is the name of the event/s to listen to on the target element separated by comma.
         */
        "targetEvent"?: string;
        /**
          * The time, in seconds at which the contained actions should be submitted.  For use with activate="at-time" Only!
         */
        "time"?: number;
    }
    interface XApp {
        /**
          * This is the application / site title. If the views or dos have titles, this is added as a suffix.
         */
        "appTitle"?: string;
        /**
          * Turn on debugging to get helpful messages from the routing, data and action systems.
         */
        "debug"?: boolean;
        /**
          * These events are **`<x-app>`** command-requests for action handlers to perform tasks. Any handles should cancel the event.
         */
        "onX:actions"?: (event: CustomEvent<any>) => void;
        /**
          * Listen for events that occurred within the **`<x-app>`** system.
         */
        "onX:events"?: (event: CustomEvent<any>) => void;
        /**
          * This is the root path that the actual page is, if it isn't '/', then the router needs to know where to begin creating paths.
         */
        "root"?: string;
        /**
          * This is the router service instantiated with this component.
         */
        "router": RouterService;
        /**
          * Header height or offset for scroll-top on this and all views.
         */
        "scrollTopOffset"?: number;
        /**
          * This is the start path a user should land on when they first land on this app.
         */
        "startUrl"?: string;
        /**
          * Navigation transition between routes. This is a CSS animation class.
         */
        "transition"?: string;
    }
    interface XAppAnalytics {
        /**
          * Raised analytics events.
         */
        "onEvent"?: (event: CustomEvent<any>) => void;
        /**
          * Page views.
         */
        "onPage-view"?: (event: CustomEvent<any>) => void;
        /**
          * View percentage views.
         */
        "onView-time"?: (event: CustomEvent<any>) => void;
    }
    interface XAppLink {
        /**
          * The class to add when this HREF is active in the browser
         */
        "activeClass"?: string;
        /**
          * Provide log messages for path matching.
         */
        "debug"?: boolean;
        /**
          * Only active on the exact href match, and not on child routes
         */
        "exact"?: boolean;
        /**
          * The destination route for this link
         */
        "href": string;
        /**
          * Only active on the exact href match using every aspect of the URL including parameters.
         */
        "strict"?: boolean;
    }
    interface XAppView {
        /**
          * Remote URL for this Route's content.
         */
        "contentSrc"?: string;
        /**
          * Turn on debug statements for load, update and render events.
         */
        "debug"?: boolean;
        /**
          * The url for this route should only be matched when it is exact.
         */
        "exact"?: boolean;
        /**
          * Cross Origin Mode if the content is pulled from a remote location
         */
        "mode"?: 'cors' | 'navigate' | 'no-cors' | 'same-origin';
        /**
          * The title for this view. This is prefixed before the app title configured in x-app
         */
        "pageTitle"?: string;
        /**
          * Before rendering remote HTML, replace any data-tokens with their resolved values. This also commands this component to re-render it's HTML for data-changes. This can affect performance.  IMPORTANT: ONLY WORKS ON REMOTE HTML
         */
        "resolveTokens"?: boolean;
        /**
          * The router-service instance  (internal)
         */
        "router": RouterService;
        /**
          * Header height or offset for scroll-top on this view.
         */
        "scrollTopOffset"?: number;
        /**
          * Remote URL for this route's HTML. HTML from this URL will be not be assigned to any slot.  You can add slot='content' to any containers within this HTML if you have a mix of HTML for this exact-route and its children.
         */
        "src"?: string;
        /**
          * Navigation transition between routes. This is a CSS animation class.
         */
        "transition"?: string;
        /**
          * The url for this route, including the parent's routes.
         */
        "url": string;
    }
    interface XAppViewDo {
        /**
          * Remote URL for HTML content. Content from this URL will be assigned the 'content' slot.
         */
        "contentSrc"?: string;
        /**
          * To debug timed elements, set this value to true.
         */
        "debug"?: boolean;
        /**
          * The url for this route should only be matched when it is exact.
         */
        "exact"?: boolean;
        /**
          * Cross Origin Mode if the content is pulled from a remote location
         */
        "mode"?: 'cors' | 'navigate' | 'no-cors' | 'same-origin';
        /**
          * When this value exists, the page will automatically progress when the duration in seconds has passed.
         */
        "nextAfter"?: number | boolean;
        /**
          * The title for this view. This is prefixed before the app title configured in x-app
         */
        "pageTitle"?: string;
        /**
          * Before rendering remote HTML, replace any data-tokens with their resolved values. This also commands this component to re-render it's HTML for data-changes. This can affect performance.  IMPORTANT: ONLY WORKS ON REMOTE HTML
         */
        "resolveTokens"?: boolean;
        /**
          * Header height or offset for scroll-top on this view.
         */
        "scrollTopOffset"?: number;
        /**
          * Navigation transition between routes. This is a CSS animation class.
         */
        "transition"?: string;
        /**
          * The url for this route, including the parent's routes.
         */
        "url": string;
        /**
          * The visit strategy for this do. once: persist the visit and never force it again always: do not persist, but don't don't show again in-session optional: do not force this view-do ever. It will be available by URL
         */
        "visit"?: 'once' | 'always' | 'optional';
        /**
          * If present, the expression must evaluate to true for this route to be sequenced by the parent view. The existence of this value overrides the visit strategy
         */
        "when"?: string;
    }
    interface XAppViewList {
        /**
          * The active-class to use with the x-app-link components.
         */
        "activeClass"?: string;
        /**
          * Specify if the '/' route should be skipped in the list.
         */
        "excludeRoot"?: boolean;
        /**
          * The list-item-class to use with the li tag
         */
        "itemClass"?: string;
        /**
          * The list-class to use with the UL tag
         */
        "listClass"?: string;
        /**
          * The display mode for which routes to display.
         */
        "mode"?: 'children' | 'parents' | 'siblings';
        /**
          * The router-service instance  (internal)
         */
        "router"?: RouterService;
        /**
          * The string separator to put between the items.
         */
        "separator"?: string;
    }
    interface XAppViewNotFound {
        /**
          * The title for this view. This is prefixed before the app title configured in x-app
         */
        "pageTitle"?: string;
        /**
          * The router-service instance  (internal)
         */
        "router": RouterService;
        /**
          * Header height or offset for scroll-top on this view.
         */
        "scrollTopOffset"?: number;
        /**
          * Navigation transition between routes. This is a CSS animation class.
         */
        "transition"?: string;
    }
    interface XAudio {
        /**
          * A reference to the action listener for testing.
         */
        "actions"?: AudioActionListener;
        /**
          * Experimental support for providing audio-data in the data-provider system.
         */
        "dataProvider"?: boolean;
        /**
          * Use debug for verbose logging. Useful for figuring thing out.
         */
        "debug"?: boolean;
        /**
          * The display mode enabled shows player state and stats. No track information or duration is be displayed.
         */
        "display"?: boolean;
        /**
          * The Howler.js Script Reference
         */
        "howlerVersion"?: string;
    }
    interface XAudioMusicAction {
        /**
          * The command to execute.
         */
        "command": | 'start'
    | 'pause'
    | 'resume'
    | 'mute'
    | 'volume'
    | 'seek';
        /**
          * Readonly topic
         */
        "topic"?: "audio";
        /**
          * The track to target.
         */
        "trackId"?: string;
        /**
          * The value payload for the command.
         */
        "value"?: string | boolean | number;
    }
    interface XAudioMusicLoad {
        /**
          * If set, disables auto-rendering of this instance. To fetch the contents change to false or remove attribute.
         */
        "deferLoad"?: boolean;
        /**
          * The discard strategy the player should use for this file.
         */
        "discard"?: 'route' | 'next' | 'none';
        /**
          * Set this to true to have the audio file loop.
         */
        "loop"?: boolean;
        /**
          * This is loading strategy that determines what is should do after the file is retrieved.
         */
        "mode"?: 'queue' | 'play' | 'load';
        /**
          * The path to the audio-file.
          * @required
         */
        "src": string;
        /**
          * The identifier for this music track
         */
        "trackId": string;
    }
    interface XAudioSoundAction {
        /**
          * The command to execute.
         */
        "command": | 'start'
    | 'pause'
    | 'resume'
    | 'mute'
    | 'volume'
    | 'seek';
        /**
          * Readonly topic
         */
        "topic"?: "audio";
        /**
          * The track to target.
         */
        "trackId"?: string;
        /**
          * The value payload for the command.
         */
        "value"?: string | boolean | number;
    }
    interface XAudioSoundLoad {
        /**
          * If set, disables auto-rendering of this instance. To fetch the contents change to false or remove attribute.
         */
        "deferLoad"?: boolean;
        /**
          * The discard strategy the player should use for this file.
         */
        "discard"?: 'route' | 'next' | 'none';
        /**
          * This is loading strategy that determines what is should do after the file is retrieved.
         */
        "mode"?: 'queue' | 'play' | 'load';
        /**
          * The path to the audio-file.
         */
        "src": string;
        /**
          * The identifier for this music track
         */
        "trackId": string;
    }
    interface XAudioStateSwitch {
        /**
          * Any classes to add to the input-element directly.
         */
        "classes"?: string;
        /**
          * The data provider to store the audio state in.
         */
        "dataProvider"?: string;
        /**
          * The id field to add to the input-element directly.
         */
        "inputId"?: string;
        /**
          * Which state property this switch controls.
         */
        "setting"?: 'muted' | 'enabled';
    }
    interface XContent {
        /**
          * If set, disables auto-rendering of this instance. To fetch the contents change to false or remove attribute.
         */
        "deferLoad"?: boolean;
        /**
          * Cross Origin Mode
         */
        "mode"?: 'cors' | 'navigate' | 'no-cors' | 'same-origin';
        /**
          * Before rendering HTML, replace any data-tokens with their resolved values. This also commands this component to re-render it's HTML for data-changes. This can affect performance.
         */
        "resolveTokens"?: boolean;
        /**
          * Remote Template URL
         */
        "src": string;
        /**
          * A data-token predicate to advise this component when to render (useful if used in a dynamic route or if tokens are used in the 'src' attribute)
         */
        "when"?: string;
    }
    interface XContentMarkdown {
        /**
          * If set, disables auto-rendering of this instance. To fetch the contents change to false or remove attribute.
         */
        "deferLoad"?: boolean;
        /**
          * Cross Origin Mode
         */
        "mode"?: 'cors' | 'navigate' | 'no-cors' | 'same-origin';
        /**
          * Force render with data & route changes.
         */
        "noCache"?: boolean;
        /**
          * Before rendering HTML, replace any data-tokens with their resolved values. This also commands this component to re-render it's HTML for data-changes. This can affect performance.
         */
        "resolveTokens"?: boolean;
        /**
          * Remote Template URL
         */
        "src"?: string;
        /**
          * A data-token predicate to advise this component when to render (useful if used in a dynamic route or if tokens are used in the 'src' attribute)
         */
        "when"?: string;
    }
    interface XContentReference {
        /**
          * If set, disables auto-rendering of this instance. To fetch the contents change to false or remove attribute.
         */
        "deferLoad"?: boolean;
        /**
          * When inline the link/script tags are rendered in-place rather than added to the head.
         */
        "inline"?: boolean;
        /**
          * Import the script file as a module.
         */
        "module"?: boolean;
        /**
          * Declare the script only for use when modules aren't supported
         */
        "noModule"?: boolean;
        /**
          * This event is fired when the script and style elements are loaded or timed out. The value for each style and script will be true or false, for loaded or timedout, respectively.
         */
        "onReferenced"?: (event: CustomEvent<ReferenceCompleteResults>) => void;
        /**
          * The script file to reference.
         */
        "scriptSrc"?: string;
        /**
          * The css file to reference
         */
        "styleSrc"?: string;
        /**
          * Timeout (in milliseconds) to wait for the references to load.
         */
        "timeout"?: number;
    }
    interface XContentReveal {
        /**
          * How far the element moves in the animation (% of element width/height)
         */
        "animationDistance"?: string;
        /**
          * How long to delay the animation (ms)
         */
        "delay"?: number;
        /**
          * Direction the element moves when animating in
         */
        "direction"?: 'up' | 'down' | 'right' | 'left';
        /**
          * How long the animation runs (ms)
         */
        "duration"?: number;
        /**
          * How much of the element must be visible before it animates (% of element height)
         */
        "triggerDistance"?: string;
    }
    interface XContentShare {
        /**
          * Headline for the share
         */
        "headline"?: string;
        /**
          * The textual body of web share
         */
        "text"?: string;
        /**
          * The URL we are sharing
         */
        "url"?: string;
    }
    interface XData {
        /**
          * The wait-time, in milliseconds to wait for un-registered data providers found in an expression. This is to accommodate a possible lag between evaluation before the first view-do 'when' predicate an the registration process.
          * @system data
         */
        "providerTimeout"?: number;
    }
    interface XDataDisplay {
        /**
          * If set, disables auto-rendering of this instance. To fetch the contents change to false or remove attribute.
         */
        "deferLoad"?: boolean;
        /**
          * The data expression to obtain a value for rendering as inner-text for this element. {{session:user.name}}
          * @default null
         */
        "text"?: string;
    }
    interface XDataProviderCookie {
        /**
          * Provider name to use in nent expressions.
         */
        "name"?: string;
        /**
          * This event is raised when the consents to cookies.
         */
        "onDidConsent"?: (event: CustomEvent<CookieConsent>) => void;
        /**
          * When skipConsent is true, the accept-cookies banner will not be displayed before accessing cookie-data.
         */
        "skipConsent"?: boolean;
    }
    interface XDataProviderSession {
        /**
          * The key prefix to use in storage
         */
        "keyPrefix"?: string;
        /**
          * Provider name to use in nent expressions.
         */
        "name"?: string;
    }
    interface XDataProviderStorage {
        /**
          * The key prefix to use in storage
         */
        "keyPrefix"?: string;
        /**
          * Provider name to use in nent expressions.
         */
        "name"?: string;
    }
    interface XDataRepeat {
        /**
          * Turn on debug statements for load, update and render events.
         */
        "debug"?: boolean;
        /**
          * If set, disables auto-rendering of this instance. To fetch the contents change to false or remove attribute.
         */
        "deferLoad"?: boolean;
        /**
          * The JSONata query to filter the json items see <https://try.jsonata.org> for more info.
         */
        "filter"?: string;
        /**
          * The array-string or data expression to obtain a collection for rendering the template. {{session:cart.items}}
         */
        "items"?: string;
        /**
          * The URL to remote JSON collection to use for the items.
          * @example /data.json
         */
        "itemsSrc"?: string;
        /**
          * Force render with data & route changes.
         */
        "noCache"?: boolean;
        /**
          * A data-token predicate to advise this component when to render (useful if used in a dynamic route or if tokens are used in the 'src' attribute)
         */
        "when"?: string;
    }
    interface XDataShow {
        /**
          * The data expression to obtain a predicate for conditionally rendering the inner-contents of this element.
         */
        "when": string;
    }
    interface XElements {
    }
    interface XUi {
    }
    interface XUiTheme {
        /**
          * Change the class name that is added to the body tag when the theme is determined to be dark.
         */
        "darkClass"?: string;
        /**
          * Skip adding the class to the body tag, just update the ui state.
         */
        "skipClass"?: boolean;
    }
    interface XUiThemeSwitch {
        /**
          * The class to add to the inner input.
         */
        "classes"?: string;
        /**
          * The inner input ID
         */
        "inputId"?: string;
    }
    interface XVideo {
        /**
          * To debug timed elements, set this value to true.
         */
        "debug"?: boolean;
        /**
          * Provide the element property name that holds the duration time in seconds. Default is duration
         */
        "durationProperty"?: string;
        /**
          * Provider the end event name. Default is ended
         */
        "endEvent"?: string;
        /**
          * Provide the element selector for the media object that can provide time-updates and media-end events.
         */
        "targetElement"?: string;
        /**
          * Provide the time-event name. Default is timeupdate
         */
        "timeEvent"?: string;
        /**
          * Provide the element property name that holds the current time in seconds. Default is currentTime
         */
        "timeProperty"?: string;
        /**
          * Normalized video event timer.
         */
        "timer"?: VideoTimer;
    }
    interface XVideoAutoplay {
        /**
          * Controls the video auto-play setting.
         */
        "enabled"?: boolean;
    }
    interface XVideoAutoplaySwitch {
        /**
          * Any classes to add to the input-element directly.
         */
        "classes"?: string;
        /**
          * The data provider to store the audio-enabled state in.
         */
        "dataProvider"?: string;
        /**
          * The id field to add to the input-element directly.
         */
        "inputId"?: string;
    }
    interface IntrinsicElements {
        "x-action": XAction;
        "x-action-activator": XActionActivator;
        "x-app": XApp;
        "x-app-analytics": XAppAnalytics;
        "x-app-link": XAppLink;
        "x-app-view": XAppView;
        "x-app-view-do": XAppViewDo;
        "x-app-view-list": XAppViewList;
        "x-app-view-not-found": XAppViewNotFound;
        "x-audio": XAudio;
        "x-audio-music-action": XAudioMusicAction;
        "x-audio-music-load": XAudioMusicLoad;
        "x-audio-sound-action": XAudioSoundAction;
        "x-audio-sound-load": XAudioSoundLoad;
        "x-audio-state-switch": XAudioStateSwitch;
        "x-content": XContent;
        "x-content-markdown": XContentMarkdown;
        "x-content-reference": XContentReference;
        "x-content-reveal": XContentReveal;
        "x-content-share": XContentShare;
        "x-data": XData;
        "x-data-display": XDataDisplay;
        "x-data-provider-cookie": XDataProviderCookie;
        "x-data-provider-session": XDataProviderSession;
        "x-data-provider-storage": XDataProviderStorage;
        "x-data-repeat": XDataRepeat;
        "x-data-show": XDataShow;
        "x-elements": XElements;
        "x-ui": XUi;
        "x-ui-theme": XUiTheme;
        "x-ui-theme-switch": XUiThemeSwitch;
        "x-video": XVideo;
        "x-video-autoplay": XVideoAutoplay;
        "x-video-autoplay-switch": XVideoAutoplaySwitch;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "x-action": LocalJSX.XAction & JSXBase.HTMLAttributes<HTMLXActionElement>;
            "x-action-activator": LocalJSX.XActionActivator & JSXBase.HTMLAttributes<HTMLXActionActivatorElement>;
            "x-app": LocalJSX.XApp & JSXBase.HTMLAttributes<HTMLXAppElement>;
            "x-app-analytics": LocalJSX.XAppAnalytics & JSXBase.HTMLAttributes<HTMLXAppAnalyticsElement>;
            "x-app-link": LocalJSX.XAppLink & JSXBase.HTMLAttributes<HTMLXAppLinkElement>;
            "x-app-view": LocalJSX.XAppView & JSXBase.HTMLAttributes<HTMLXAppViewElement>;
            "x-app-view-do": LocalJSX.XAppViewDo & JSXBase.HTMLAttributes<HTMLXAppViewDoElement>;
            "x-app-view-list": LocalJSX.XAppViewList & JSXBase.HTMLAttributes<HTMLXAppViewListElement>;
            "x-app-view-not-found": LocalJSX.XAppViewNotFound & JSXBase.HTMLAttributes<HTMLXAppViewNotFoundElement>;
            "x-audio": LocalJSX.XAudio & JSXBase.HTMLAttributes<HTMLXAudioElement>;
            "x-audio-music-action": LocalJSX.XAudioMusicAction & JSXBase.HTMLAttributes<HTMLXAudioMusicActionElement>;
            "x-audio-music-load": LocalJSX.XAudioMusicLoad & JSXBase.HTMLAttributes<HTMLXAudioMusicLoadElement>;
            "x-audio-sound-action": LocalJSX.XAudioSoundAction & JSXBase.HTMLAttributes<HTMLXAudioSoundActionElement>;
            "x-audio-sound-load": LocalJSX.XAudioSoundLoad & JSXBase.HTMLAttributes<HTMLXAudioSoundLoadElement>;
            "x-audio-state-switch": LocalJSX.XAudioStateSwitch & JSXBase.HTMLAttributes<HTMLXAudioStateSwitchElement>;
            "x-content": LocalJSX.XContent & JSXBase.HTMLAttributes<HTMLXContentElement>;
            "x-content-markdown": LocalJSX.XContentMarkdown & JSXBase.HTMLAttributes<HTMLXContentMarkdownElement>;
            "x-content-reference": LocalJSX.XContentReference & JSXBase.HTMLAttributes<HTMLXContentReferenceElement>;
            "x-content-reveal": LocalJSX.XContentReveal & JSXBase.HTMLAttributes<HTMLXContentRevealElement>;
            "x-content-share": LocalJSX.XContentShare & JSXBase.HTMLAttributes<HTMLXContentShareElement>;
            "x-data": LocalJSX.XData & JSXBase.HTMLAttributes<HTMLXDataElement>;
            "x-data-display": LocalJSX.XDataDisplay & JSXBase.HTMLAttributes<HTMLXDataDisplayElement>;
            "x-data-provider-cookie": LocalJSX.XDataProviderCookie & JSXBase.HTMLAttributes<HTMLXDataProviderCookieElement>;
            "x-data-provider-session": LocalJSX.XDataProviderSession & JSXBase.HTMLAttributes<HTMLXDataProviderSessionElement>;
            "x-data-provider-storage": LocalJSX.XDataProviderStorage & JSXBase.HTMLAttributes<HTMLXDataProviderStorageElement>;
            "x-data-repeat": LocalJSX.XDataRepeat & JSXBase.HTMLAttributes<HTMLXDataRepeatElement>;
            "x-data-show": LocalJSX.XDataShow & JSXBase.HTMLAttributes<HTMLXDataShowElement>;
            "x-elements": LocalJSX.XElements & JSXBase.HTMLAttributes<HTMLXElementsElement>;
            "x-ui": LocalJSX.XUi & JSXBase.HTMLAttributes<HTMLXUiElement>;
            "x-ui-theme": LocalJSX.XUiTheme & JSXBase.HTMLAttributes<HTMLXUiThemeElement>;
            "x-ui-theme-switch": LocalJSX.XUiThemeSwitch & JSXBase.HTMLAttributes<HTMLXUiThemeSwitchElement>;
            "x-video": LocalJSX.XVideo & JSXBase.HTMLAttributes<HTMLXVideoElement>;
            "x-video-autoplay": LocalJSX.XVideoAutoplay & JSXBase.HTMLAttributes<HTMLXVideoAutoplayElement>;
            "x-video-autoplay-switch": LocalJSX.XVideoAutoplaySwitch & JSXBase.HTMLAttributes<HTMLXVideoAutoplaySwitchElement>;
        }
    }
}
