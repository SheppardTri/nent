/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { EventAction } from "./services/actions";
import { AudioActionListener } from "./components/n-audio/audio/actions";
import { AudioInfo, AudioRequest } from "./components/n-audio/audio/interfaces";
import { ReferenceCompleteResults } from "./services/content";
import { CookieConsent } from "./components/n-data-cookie/cookie/interfaces";
import { SetData } from "./components/n-data/data/interfaces";
import { VideoTimer } from "./components/n-video/video/timer";
export namespace Components {
    interface NAction {
        /**
          * The command to execute.
         */
        "command": string;
        /**
          * Get the underlying actionEvent instance. Used by the n-action-activator element.
         */
        "getAction": () => Promise<EventAction<any> | null>;
        /**
          * Send this action to the the action messaging system.
         */
        "sendAction": (data?: Record<string, any> | undefined) => Promise<void>;
        /**
          * This is the topic this action-command is targeting.
         */
        "topic": string;
    }
    interface NActionActivator {
        /**
          * The activation strategy to use for the contained actions.
         */
        "activate": | 'on-render'
    | 'on-element-event'
    | 'on-enter'
    | 'at-time'
    | 'on-exit';
        /**
          * Manually activate all actions within this activator.
         */
        "activateActions": () => Promise<void>;
        /**
          * Turn on debug statements for load, update and render events.
         */
        "debug": boolean;
        /**
          * Limit the activation to ONCE. This could be helpful if an action has side-effects if it is run multiple times.  Note: the activation state is stored in memory and does not persist across refreshes.
         */
        "once": boolean;
        /**
          * The element to watch for events when using the OnElementEvent activation strategy. This element uses the HTML Element querySelector function to find the element.  For use with activate="on-element-event" Only!
         */
        "targetElement"?: string;
        /**
          * This is the name of the event/s to listen to on the target element separated by comma.
         */
        "targetEvent": string;
        /**
          * The time, in seconds at which the contained actions should be submitted.  For use with activate="at-time" Only!
         */
        "time"?: number;
    }
    interface NAnalytics {
    }
    interface NApp {
        /**
          * Turn on debugging to get helpful messages from the app, routing, data and action systems.
         */
        "debug": boolean;
        /**
          * Turn off declarative actions for the entire app.
         */
        "disableActions": boolean;
    }
    interface NAppTheme {
        /**
          * Change the class name that is added to the body tag when the theme is determined to be dark.
         */
        "darkClass": string;
        /**
          * Skip adding the class to the body tag, just update the ui state.
         */
        "skipClass": boolean;
    }
    interface NAppThemeSwitch {
        /**
          * The class to add to the inner input.
         */
        "classes"?: string;
        /**
          * The inner input ID
         */
        "inputId"?: string;
    }
    interface NAudio {
        /**
          * A reference to the action listener for testing.
         */
        "actions"?: AudioActionListener;
        /**
          * Experimental support for providing audio-data in the data-provider system.
         */
        "dataProvider": boolean;
        /**
          * Use debug for verbose logging. Useful for figuring thing out.
         */
        "debug": boolean;
        /**
          * The display mode enabled shows player state and stats. No track information or duration is be displayed.
         */
        "display": boolean;
        /**
          * The Howler.js Script Reference
         */
        "howlerVersion": string;
    }
    interface NAudioActionMusic {
        /**
          * The command to execute.
         */
        "command": | 'start'
    | 'pause'
    | 'resume'
    | 'mute'
    | 'volume'
    | 'seek';
        /**
          * Get the underlying actionEvent instance. Used by the n-action-activator element.
         */
        "getAction": () => Promise<EventAction<any>>;
        /**
          * Send this action to the the action messaging system.
         */
        "sendAction": (data?: Record<string, any> | undefined) => Promise<void>;
        /**
          * Readonly topic
         */
        "topic": "audio";
        /**
          * The track to target.
         */
        "trackId"?: string;
        /**
          * The value payload for the command.
         */
        "value"?: string | boolean | number;
    }
    interface NAudioActionMusicLoad {
        /**
          * If set, disables auto-rendering of this instance. To fetch the contents change to false or remove attribute.
         */
        "deferLoad": boolean;
        /**
          * The discard strategy the player should use for this file.
         */
        "discard": 'route' | 'next' | 'none';
        /**
          * Get the underlying actionEvent instance.
         */
        "getAction": () => Promise<EventAction<AudioInfo | AudioRequest | any>>;
        /**
          * Set this to true to have the audio file loop.
         */
        "loop": boolean;
        /**
          * This is loading strategy that determines what is should do after the file is retrieved.
         */
        "mode": 'queue' | 'play' | 'load';
        /**
          * Send this action to the the action messaging system.
         */
        "sendAction": (data?: Record<string, any> | undefined) => Promise<void>;
        /**
          * The path to the audio-file.
          * @required
         */
        "src": string;
        /**
          * The identifier for this music track
         */
        "trackId": string;
    }
    interface NAudioActionSound {
        /**
          * The command to execute.
         */
        "command": | 'start'
    | 'pause'
    | 'resume'
    | 'mute'
    | 'volume'
    | 'seek';
        /**
          * Get the underlying actionEvent instance. Used by the n-action-activator element.
         */
        "getAction": () => Promise<EventAction<any>>;
        /**
          * Send this action to the the action messaging system.
         */
        "sendAction": (data?: Record<string, any> | undefined) => Promise<void>;
        /**
          * Readonly topic
         */
        "topic": "audio";
        /**
          * The track to target.
         */
        "trackId"?: string;
        /**
          * The value payload for the command.
         */
        "value"?: string | boolean | number;
    }
    interface NAudioActionSoundLoad {
        /**
          * If set, disables auto-rendering of this instance. To fetch the contents change to false or remove attribute.
         */
        "deferLoad": boolean;
        /**
          * The discard strategy the player should use for this file.
         */
        "discard": 'route' | 'next' | 'none';
        /**
          * Get the underlying actionEvent instance.
         */
        "getAction": () => Promise<EventAction<AudioInfo | AudioRequest | any>>;
        /**
          * This is loading strategy that determines what is should do after the file is retrieved.
         */
        "mode": 'queue' | 'play' | 'load';
        /**
          * Send this action to the the action messaging system.
         */
        "sendAction": (data?: Record<string, any> | undefined) => Promise<void>;
        /**
          * The path to the audio-file.
         */
        "src": string;
        /**
          * The identifier for this music track
         */
        "trackId": string;
    }
    interface NAudioSwitch {
        /**
          * Any classes to add to the input-element directly.
         */
        "classes"?: string;
        /**
          * The data provider to store the audio state in.
         */
        "dataProvider": string;
        /**
          * The id field to add to the input-element directly.
         */
        "inputId"?: string;
        /**
          * Which state property this switch controls.
         */
        "setting": 'muted' | 'enabled';
    }
    interface NContentData {
        /**
          * If set, disables auto-rendering of this instance. To fetch the contents change to false or remove attribute.
         */
        "deferLoad": boolean;
        /**
          * The data expression to obtain a value for rendering as inner-text for this element. {{session:user.name}}
          * @default null
         */
        "text"?: string;
    }
    interface NContentDataRepeat {
        /**
          * Turn on debug statements for load, update and render events.
         */
        "debug": boolean;
        /**
          * If set, disables auto-rendering of this instance. To fetch the contents change to false or remove attribute.
         */
        "deferLoad": boolean;
        /**
          * The JSONata query to filter the json items see <https://try.jsonata.org> for more info.
         */
        "filter"?: string;
        /**
          * The array-string or data expression to obtain a collection for rendering the template. {{session:cart.items}}
         */
        "items"?: string;
        /**
          * The URL to remote JSON collection to use for the items.
          * @example /data.json
         */
        "itemsSrc"?: string;
        /**
          * Force render with data & route changes.
         */
        "noCache": boolean;
        /**
          * A data-token predicate to advise this component when to render (useful if used in a dynamic route or if tokens are used in the 'src' attribute)
         */
        "when"?: string;
    }
    interface NContentInclude {
        /**
          * If set, disables auto-rendering of this instance. To fetch the contents change to false or remove attribute.
         */
        "deferLoad": boolean;
        /**
          * Cross Origin Mode
         */
        "mode": 'cors' | 'navigate' | 'no-cors' | 'same-origin';
        /**
          * Before rendering HTML, replace any data-tokens with their resolved values. This also commands this component to re-render it's HTML for data-changes. This can affect performance.
         */
        "resolveTokens": boolean;
        /**
          * Remote Template URL
         */
        "src": string;
        /**
          * A data-token predicate to advise this component when to render (useful if used in a dynamic route or if tokens are used in the 'src' attribute)
         */
        "when"?: string;
    }
    interface NContentMarkdown {
        /**
          * If set, disables auto-rendering of this instance. To fetch the contents change to false or remove attribute.
         */
        "deferLoad": boolean;
        /**
          * Cross Origin Mode
         */
        "mode": 'cors' | 'navigate' | 'no-cors' | 'same-origin';
        /**
          * Force render with data & route changes.
         */
        "noCache": boolean;
        /**
          * Before rendering HTML, replace any data-tokens with their resolved values. This also commands this component to re-render it's HTML for data-changes. This can affect performance.
         */
        "resolveTokens": boolean;
        /**
          * Remote Template URL
         */
        "src"?: string;
        /**
          * A data-token predicate to advise this component when to render (useful if used in a dynamic route or if tokens are used in the 'src' attribute)
         */
        "when"?: string;
    }
    interface NContentReference {
        /**
          * If set, disables auto-rendering of this instance. To fetch the contents change to false or remove attribute.
         */
        "deferLoad": boolean;
        /**
          * Force the 'load' event of the script or link element. This is meant for testing.
         */
        "forceLoad": () => Promise<void>;
        /**
          * When inline the link/script tags are rendered in-place rather than added to the head.
         */
        "inline": boolean;
        /**
          * Import the script file as a module.
         */
        "module": boolean;
        /**
          * Declare the script only for use when modules aren't supported
         */
        "noModule": boolean;
        /**
          * The script file to reference.
         */
        "scriptSrc"?: string;
        /**
          * The css file to reference
         */
        "styleSrc"?: string;
        /**
          * Timeout (in milliseconds) to wait for the references to load.
         */
        "timeout": number;
    }
    interface NContentReveal {
        /**
          * How far the element moves in the animation (% of element width/height)
         */
        "animationDistance": string;
        /**
          * How long to delay the animation (ms)
         */
        "delay": number;
        /**
          * Direction the element moves when animating in
         */
        "direction": 'up' | 'down' | 'right' | 'left';
        /**
          * How long the animation runs (ms)
         */
        "duration": number;
        /**
          * How much of the element must be visible before it animates (% of element height)
         */
        "triggerDistance": string;
    }
    interface NContentShare {
        /**
          * Headline for the share
         */
        "headline"?: string;
        /**
          * Manual share method for more complex scenarios
          * @param data
         */
        "share": (data?: { title?: string | undefined; text?: string | undefined; url?: string | undefined; } | null | undefined) => Promise<void>;
        /**
          * The textual body of web share
         */
        "text"?: string;
        /**
          * The URL we are sharing
         */
        "url"?: string;
    }
    interface NContentShow {
        /**
          * The data expression to obtain a predicate for conditionally rendering the inner-contents of this element.
         */
        "when": string;
    }
    interface NData {
        /**
          * The wait-time, in milliseconds to wait for un-registered data providers found in an expression. This is to accommodate a possible lag between evaluation before the first view-do 'when' predicate an the registration process.
          * @system data
         */
        "providerTimeout": number;
    }
    interface NDataCookie {
        /**
          * Provider name to use in nent expressions.
         */
        "name": string;
        /**
          * Immediately register the provider.
         */
        "registerProvider": () => Promise<void>;
        /**
          * When skipConsent is true, the accept-cookies banner will not be displayed before accessing cookie-data.
         */
        "skipConsent": boolean;
    }
    interface NDataSession {
        /**
          * The key prefix to use in storage
         */
        "keyPrefix"?: string;
        /**
          * Provider name to use in nent expressions.
         */
        "name": string;
    }
    interface NDataStorage {
        /**
          * The key prefix to use in storage
         */
        "keyPrefix"?: string;
        /**
          * Provider name to use in nent expressions.
         */
        "name": string;
    }
    interface NElements {
    }
    interface NVideo {
        /**
          * To debug timed elements, set this value to true.
         */
        "debug": boolean;
        /**
          * Provide the element property name that holds the duration time in seconds. Default is duration
         */
        "durationProperty": string;
        /**
          * Provider the end event name. Default is ended
         */
        "endEvent": string;
        /**
          * Provide the element selector for the media object that can provide time-updates and media-end events.
         */
        "targetElement": string;
        /**
          * Provide the time-event name. Default is timeupdate
         */
        "timeEvent": string;
        /**
          * Provide the element property name that holds the current time in seconds. Default is currentTime
         */
        "timeProperty": string;
        /**
          * Normalized video event timer.
         */
        "timer"?: VideoTimer;
    }
    interface NVideoSwitch {
        /**
          * Any classes to add to the input-element directly.
         */
        "classes"?: string;
        /**
          * The data provider to store the audio-enabled state in.
         */
        "dataProvider": string;
        /**
          * The id field to add to the input-element directly.
         */
        "inputId"?: string;
    }
    interface NView {
        /**
          * Remote URL for this Route's content.
         */
        "contentSrc"?: string;
        /**
          * Turn on debug statements for load, update and render events.
         */
        "debug": boolean;
        /**
          * The url for this route should only be matched when it is exact.
         */
        "exact": boolean;
        /**
          * Return all child elements used for processing. This function is primarily meant for testing.
         */
        "getChildren": () => Promise<{ activators: HTMLNActionActivatorElement[]; views: HTMLNViewElement[]; dos: HTMLNViewPromptElement[]; }>;
        /**
          * Cross Origin Mode if the content is pulled from a remote location
         */
        "mode": 'cors' | 'navigate' | 'no-cors' | 'same-origin';
        /**
          * The title for this view. This is prefixed before the app title configured in n-views
         */
        "pageTitle": string;
        /**
          * Before rendering remote HTML, replace any data-tokens with their resolved values. This also commands this component to re-render it's HTML for data-changes. This can affect performance.  IMPORTANT: ONLY WORKS ON REMOTE HTML
         */
        "resolveTokens": boolean;
        /**
          * Header height or offset for scroll-top on this view.
         */
        "scrollTopOffset": number;
        /**
          * Remote URL for this route's HTML. HTML from this URL will be not be assigned to any slot.  You can add slot='content' to any containers within this HTML if you have a mix of HTML for this exact-route and its children.
         */
        "src"?: string;
        /**
          * Navigation transition between routes. This is a CSS animation class.
         */
        "transition"?: string;
        /**
          * The url for this route, including the parent's routes.
         */
        "url": string;
    }
    interface NViewLink {
        /**
          * The class to add when this HREF is active in the browser
         */
        "activeClass": string;
        /**
          * Provide log messages for path matching.
         */
        "debug": boolean;
        /**
          * Only active on the exact href match, and not on child routes
         */
        "exact": boolean;
        /**
          * The destination route for this link
         */
        "href": string;
        /**
          * Only active on the exact href match using every aspect of the URL including parameters.
         */
        "strict": boolean;
    }
    interface NViewLinkList {
        /**
          * The active-class to use with the n-view-link components.
         */
        "activeClass"?: string;
        /**
          * Specify if the '/' route should be skipped in the list.
         */
        "excludeRoot": boolean;
        /**
          * The list-item-class to use with the li tag
         */
        "itemClass"?: string;
        /**
          * The list-class to use with the UL tag
         */
        "listClass"?: string;
        /**
          * The display mode for which routes to display.
         */
        "mode": 'children' | 'parents' | 'siblings';
        /**
          * The string separator to put between the items.
         */
        "separator"?: string;
    }
    interface NViewNotFound {
        /**
          * The title for this view. This is prefixed before the app title configured in n-views
         */
        "pageTitle": string;
        /**
          * Header height or offset for scroll-top on this view.
         */
        "scrollTopOffset": number;
        /**
          * Navigation transition between routes. This is a CSS animation class.
         */
        "transition"?: string;
    }
    interface NViewPrompt {
        /**
          * Remote URL for HTML content. Content from this URL will be assigned the 'content' slot.
         */
        "contentSrc"?: string;
        /**
          * To debug timed elements, set this value to true.
         */
        "debug": boolean;
        /**
          * The url for this route should only be matched when it is exact.
         */
        "exact": boolean;
        /**
          * Cross Origin Mode if the content is pulled from a remote location
         */
        "mode": 'cors' | 'navigate' | 'no-cors' | 'same-origin';
        /**
          * When this value exists, the page will automatically progress when the duration in seconds has passed.
         */
        "nextAfter"?: number | boolean;
        /**
          * The title for this view. This is prefixed before the app title configured in n-views
         */
        "pageTitle": string;
        /**
          * Before rendering remote HTML, replace any data-tokens with their resolved values. This also commands this component to re-render it's HTML for data-changes. This can affect performance.  IMPORTANT: ONLY WORKS ON REMOTE HTML
         */
        "resolveTokens": boolean;
        /**
          * Header height or offset for scroll-top on this view.
         */
        "scrollTopOffset"?: number;
        /**
          * Navigation transition between routes. This is a CSS animation class.
         */
        "transition"?: string;
        /**
          * The url for this route, including the parent's routes.
         */
        "url": string;
        /**
          * The visit strategy for this do. once: persist the visit and never force it again always: do not persist, but don't don't show again in-session optional: do not force this view-do ever. It will be available by URL
         */
        "visit": 'once' | 'always' | 'optional';
        /**
          * If present, the expression must evaluate to true for this route to be sequenced by the parent view. The existence of this value overrides the visit strategy
         */
        "when"?: string;
    }
    interface NViews {
        /**
          * This is the application / site title. If the views or dos have titles, this is added as a suffix.
         */
        "appTitle"?: string;
        /**
          * This is the root path that the actual page is, if it isn't '/', then the router needs to know where to begin creating paths.
         */
        "root": string;
        /**
          * Header height or offset for scroll-top on this and all views.
         */
        "scrollTopOffset"?: number;
        /**
          * This is the start path a user should land on when they first land on this app.
         */
        "startUrl": string;
        /**
          * Navigation transition between routes. This is a CSS animation class.
         */
        "transition"?: string;
    }
}
declare global {
    interface HTMLNActionElement extends Components.NAction, HTMLStencilElement {
    }
    var HTMLNActionElement: {
        prototype: HTMLNActionElement;
        new (): HTMLNActionElement;
    };
    interface HTMLNActionActivatorElement extends Components.NActionActivator, HTMLStencilElement {
    }
    var HTMLNActionActivatorElement: {
        prototype: HTMLNActionActivatorElement;
        new (): HTMLNActionActivatorElement;
    };
    interface HTMLNAnalyticsElement extends Components.NAnalytics, HTMLStencilElement {
    }
    var HTMLNAnalyticsElement: {
        prototype: HTMLNAnalyticsElement;
        new (): HTMLNAnalyticsElement;
    };
    interface HTMLNAppElement extends Components.NApp, HTMLStencilElement {
    }
    var HTMLNAppElement: {
        prototype: HTMLNAppElement;
        new (): HTMLNAppElement;
    };
    interface HTMLNAppThemeElement extends Components.NAppTheme, HTMLStencilElement {
    }
    var HTMLNAppThemeElement: {
        prototype: HTMLNAppThemeElement;
        new (): HTMLNAppThemeElement;
    };
    interface HTMLNAppThemeSwitchElement extends Components.NAppThemeSwitch, HTMLStencilElement {
    }
    var HTMLNAppThemeSwitchElement: {
        prototype: HTMLNAppThemeSwitchElement;
        new (): HTMLNAppThemeSwitchElement;
    };
    interface HTMLNAudioElement extends Components.NAudio, HTMLStencilElement {
    }
    var HTMLNAudioElement: {
        prototype: HTMLNAudioElement;
        new (): HTMLNAudioElement;
    };
    interface HTMLNAudioActionMusicElement extends Components.NAudioActionMusic, HTMLStencilElement {
    }
    var HTMLNAudioActionMusicElement: {
        prototype: HTMLNAudioActionMusicElement;
        new (): HTMLNAudioActionMusicElement;
    };
    interface HTMLNAudioActionMusicLoadElement extends Components.NAudioActionMusicLoad, HTMLStencilElement {
    }
    var HTMLNAudioActionMusicLoadElement: {
        prototype: HTMLNAudioActionMusicLoadElement;
        new (): HTMLNAudioActionMusicLoadElement;
    };
    interface HTMLNAudioActionSoundElement extends Components.NAudioActionSound, HTMLStencilElement {
    }
    var HTMLNAudioActionSoundElement: {
        prototype: HTMLNAudioActionSoundElement;
        new (): HTMLNAudioActionSoundElement;
    };
    interface HTMLNAudioActionSoundLoadElement extends Components.NAudioActionSoundLoad, HTMLStencilElement {
    }
    var HTMLNAudioActionSoundLoadElement: {
        prototype: HTMLNAudioActionSoundLoadElement;
        new (): HTMLNAudioActionSoundLoadElement;
    };
    interface HTMLNAudioSwitchElement extends Components.NAudioSwitch, HTMLStencilElement {
    }
    var HTMLNAudioSwitchElement: {
        prototype: HTMLNAudioSwitchElement;
        new (): HTMLNAudioSwitchElement;
    };
    interface HTMLNContentDataElement extends Components.NContentData, HTMLStencilElement {
    }
    var HTMLNContentDataElement: {
        prototype: HTMLNContentDataElement;
        new (): HTMLNContentDataElement;
    };
    interface HTMLNContentDataRepeatElement extends Components.NContentDataRepeat, HTMLStencilElement {
    }
    var HTMLNContentDataRepeatElement: {
        prototype: HTMLNContentDataRepeatElement;
        new (): HTMLNContentDataRepeatElement;
    };
    interface HTMLNContentIncludeElement extends Components.NContentInclude, HTMLStencilElement {
    }
    var HTMLNContentIncludeElement: {
        prototype: HTMLNContentIncludeElement;
        new (): HTMLNContentIncludeElement;
    };
    interface HTMLNContentMarkdownElement extends Components.NContentMarkdown, HTMLStencilElement {
    }
    var HTMLNContentMarkdownElement: {
        prototype: HTMLNContentMarkdownElement;
        new (): HTMLNContentMarkdownElement;
    };
    interface HTMLNContentReferenceElement extends Components.NContentReference, HTMLStencilElement {
    }
    var HTMLNContentReferenceElement: {
        prototype: HTMLNContentReferenceElement;
        new (): HTMLNContentReferenceElement;
    };
    interface HTMLNContentRevealElement extends Components.NContentReveal, HTMLStencilElement {
    }
    var HTMLNContentRevealElement: {
        prototype: HTMLNContentRevealElement;
        new (): HTMLNContentRevealElement;
    };
    interface HTMLNContentShareElement extends Components.NContentShare, HTMLStencilElement {
    }
    var HTMLNContentShareElement: {
        prototype: HTMLNContentShareElement;
        new (): HTMLNContentShareElement;
    };
    interface HTMLNContentShowElement extends Components.NContentShow, HTMLStencilElement {
    }
    var HTMLNContentShowElement: {
        prototype: HTMLNContentShowElement;
        new (): HTMLNContentShowElement;
    };
    interface HTMLNDataElement extends Components.NData, HTMLStencilElement {
    }
    var HTMLNDataElement: {
        prototype: HTMLNDataElement;
        new (): HTMLNDataElement;
    };
    interface HTMLNDataCookieElement extends Components.NDataCookie, HTMLStencilElement {
    }
    var HTMLNDataCookieElement: {
        prototype: HTMLNDataCookieElement;
        new (): HTMLNDataCookieElement;
    };
    interface HTMLNDataSessionElement extends Components.NDataSession, HTMLStencilElement {
    }
    var HTMLNDataSessionElement: {
        prototype: HTMLNDataSessionElement;
        new (): HTMLNDataSessionElement;
    };
    interface HTMLNDataStorageElement extends Components.NDataStorage, HTMLStencilElement {
    }
    var HTMLNDataStorageElement: {
        prototype: HTMLNDataStorageElement;
        new (): HTMLNDataStorageElement;
    };
    interface HTMLNElementsElement extends Components.NElements, HTMLStencilElement {
    }
    var HTMLNElementsElement: {
        prototype: HTMLNElementsElement;
        new (): HTMLNElementsElement;
    };
    interface HTMLNVideoElement extends Components.NVideo, HTMLStencilElement {
    }
    var HTMLNVideoElement: {
        prototype: HTMLNVideoElement;
        new (): HTMLNVideoElement;
    };
    interface HTMLNVideoSwitchElement extends Components.NVideoSwitch, HTMLStencilElement {
    }
    var HTMLNVideoSwitchElement: {
        prototype: HTMLNVideoSwitchElement;
        new (): HTMLNVideoSwitchElement;
    };
    interface HTMLNViewElement extends Components.NView, HTMLStencilElement {
    }
    var HTMLNViewElement: {
        prototype: HTMLNViewElement;
        new (): HTMLNViewElement;
    };
    interface HTMLNViewLinkElement extends Components.NViewLink, HTMLStencilElement {
    }
    var HTMLNViewLinkElement: {
        prototype: HTMLNViewLinkElement;
        new (): HTMLNViewLinkElement;
    };
    interface HTMLNViewLinkListElement extends Components.NViewLinkList, HTMLStencilElement {
    }
    var HTMLNViewLinkListElement: {
        prototype: HTMLNViewLinkListElement;
        new (): HTMLNViewLinkListElement;
    };
    interface HTMLNViewNotFoundElement extends Components.NViewNotFound, HTMLStencilElement {
    }
    var HTMLNViewNotFoundElement: {
        prototype: HTMLNViewNotFoundElement;
        new (): HTMLNViewNotFoundElement;
    };
    interface HTMLNViewPromptElement extends Components.NViewPrompt, HTMLStencilElement {
    }
    var HTMLNViewPromptElement: {
        prototype: HTMLNViewPromptElement;
        new (): HTMLNViewPromptElement;
    };
    interface HTMLNViewsElement extends Components.NViews, HTMLStencilElement {
    }
    var HTMLNViewsElement: {
        prototype: HTMLNViewsElement;
        new (): HTMLNViewsElement;
    };
    interface HTMLElementTagNameMap {
        "n-action": HTMLNActionElement;
        "n-action-activator": HTMLNActionActivatorElement;
        "n-analytics": HTMLNAnalyticsElement;
        "n-app": HTMLNAppElement;
        "n-app-theme": HTMLNAppThemeElement;
        "n-app-theme-switch": HTMLNAppThemeSwitchElement;
        "n-audio": HTMLNAudioElement;
        "n-audio-action-music": HTMLNAudioActionMusicElement;
        "n-audio-action-music-load": HTMLNAudioActionMusicLoadElement;
        "n-audio-action-sound": HTMLNAudioActionSoundElement;
        "n-audio-action-sound-load": HTMLNAudioActionSoundLoadElement;
        "n-audio-switch": HTMLNAudioSwitchElement;
        "n-content-data": HTMLNContentDataElement;
        "n-content-data-repeat": HTMLNContentDataRepeatElement;
        "n-content-include": HTMLNContentIncludeElement;
        "n-content-markdown": HTMLNContentMarkdownElement;
        "n-content-reference": HTMLNContentReferenceElement;
        "n-content-reveal": HTMLNContentRevealElement;
        "n-content-share": HTMLNContentShareElement;
        "n-content-show": HTMLNContentShowElement;
        "n-data": HTMLNDataElement;
        "n-data-cookie": HTMLNDataCookieElement;
        "n-data-session": HTMLNDataSessionElement;
        "n-data-storage": HTMLNDataStorageElement;
        "n-elements": HTMLNElementsElement;
        "n-video": HTMLNVideoElement;
        "n-video-switch": HTMLNVideoSwitchElement;
        "n-view": HTMLNViewElement;
        "n-view-link": HTMLNViewLinkElement;
        "n-view-link-list": HTMLNViewLinkListElement;
        "n-view-not-found": HTMLNViewNotFoundElement;
        "n-view-prompt": HTMLNViewPromptElement;
        "n-views": HTMLNViewsElement;
    }
}
declare namespace LocalJSX {
    interface NAction {
        /**
          * The command to execute.
         */
        "command": string;
        /**
          * This is the topic this action-command is targeting.
         */
        "topic": string;
    }
    interface NActionActivator {
        /**
          * The activation strategy to use for the contained actions.
         */
        "activate"?: | 'on-render'
    | 'on-element-event'
    | 'on-enter'
    | 'at-time'
    | 'on-exit';
        /**
          * Turn on debug statements for load, update and render events.
         */
        "debug"?: boolean;
        /**
          * Limit the activation to ONCE. This could be helpful if an action has side-effects if it is run multiple times.  Note: the activation state is stored in memory and does not persist across refreshes.
         */
        "once"?: boolean;
        /**
          * The element to watch for events when using the OnElementEvent activation strategy. This element uses the HTML Element querySelector function to find the element.  For use with activate="on-element-event" Only!
         */
        "targetElement"?: string;
        /**
          * This is the name of the event/s to listen to on the target element separated by comma.
         */
        "targetEvent"?: string;
        /**
          * The time, in seconds at which the contained actions should be submitted.  For use with activate="at-time" Only!
         */
        "time"?: number;
    }
    interface NAnalytics {
        /**
          * Raised analytics events.
         */
        "onEvent"?: (event: CustomEvent<any>) => void;
        /**
          * Page views.
         */
        "onPage-view"?: (event: CustomEvent<any>) => void;
        /**
          * View percentage views.
         */
        "onView-time"?: (event: CustomEvent<any>) => void;
    }
    interface NApp {
        /**
          * Turn on debugging to get helpful messages from the app, routing, data and action systems.
         */
        "debug"?: boolean;
        /**
          * Turn off declarative actions for the entire app.
         */
        "disableActions"?: boolean;
        /**
          * These events are **`<n-views>`** command-requests for action handlers to perform tasks. Any handles should cancel the event.
         */
        "onNent:actions"?: (event: CustomEvent<any>) => void;
        /**
          * Listen for events that occurred within the **`<n-views>`** system.
         */
        "onNent:events"?: (event: CustomEvent<any>) => void;
    }
    interface NAppTheme {
        /**
          * Change the class name that is added to the body tag when the theme is determined to be dark.
         */
        "darkClass"?: string;
        /**
          * Skip adding the class to the body tag, just update the ui state.
         */
        "skipClass"?: boolean;
    }
    interface NAppThemeSwitch {
        /**
          * The class to add to the inner input.
         */
        "classes"?: string;
        /**
          * The inner input ID
         */
        "inputId"?: string;
    }
    interface NAudio {
        /**
          * A reference to the action listener for testing.
         */
        "actions"?: AudioActionListener;
        /**
          * Experimental support for providing audio-data in the data-provider system.
         */
        "dataProvider"?: boolean;
        /**
          * Use debug for verbose logging. Useful for figuring thing out.
         */
        "debug"?: boolean;
        /**
          * The display mode enabled shows player state and stats. No track information or duration is be displayed.
         */
        "display"?: boolean;
        /**
          * The Howler.js Script Reference
         */
        "howlerVersion"?: string;
    }
    interface NAudioActionMusic {
        /**
          * The command to execute.
         */
        "command": | 'start'
    | 'pause'
    | 'resume'
    | 'mute'
    | 'volume'
    | 'seek';
        /**
          * Readonly topic
         */
        "topic"?: "audio";
        /**
          * The track to target.
         */
        "trackId"?: string;
        /**
          * The value payload for the command.
         */
        "value"?: string | boolean | number;
    }
    interface NAudioActionMusicLoad {
        /**
          * If set, disables auto-rendering of this instance. To fetch the contents change to false or remove attribute.
         */
        "deferLoad"?: boolean;
        /**
          * The discard strategy the player should use for this file.
         */
        "discard"?: 'route' | 'next' | 'none';
        /**
          * Set this to true to have the audio file loop.
         */
        "loop"?: boolean;
        /**
          * This is loading strategy that determines what is should do after the file is retrieved.
         */
        "mode"?: 'queue' | 'play' | 'load';
        /**
          * The path to the audio-file.
          * @required
         */
        "src": string;
        /**
          * The identifier for this music track
         */
        "trackId": string;
    }
    interface NAudioActionSound {
        /**
          * The command to execute.
         */
        "command": | 'start'
    | 'pause'
    | 'resume'
    | 'mute'
    | 'volume'
    | 'seek';
        /**
          * Readonly topic
         */
        "topic"?: "audio";
        /**
          * The track to target.
         */
        "trackId"?: string;
        /**
          * The value payload for the command.
         */
        "value"?: string | boolean | number;
    }
    interface NAudioActionSoundLoad {
        /**
          * If set, disables auto-rendering of this instance. To fetch the contents change to false or remove attribute.
         */
        "deferLoad"?: boolean;
        /**
          * The discard strategy the player should use for this file.
         */
        "discard"?: 'route' | 'next' | 'none';
        /**
          * This is loading strategy that determines what is should do after the file is retrieved.
         */
        "mode"?: 'queue' | 'play' | 'load';
        /**
          * The path to the audio-file.
         */
        "src": string;
        /**
          * The identifier for this music track
         */
        "trackId": string;
    }
    interface NAudioSwitch {
        /**
          * Any classes to add to the input-element directly.
         */
        "classes"?: string;
        /**
          * The data provider to store the audio state in.
         */
        "dataProvider"?: string;
        /**
          * The id field to add to the input-element directly.
         */
        "inputId"?: string;
        /**
          * Which state property this switch controls.
         */
        "setting"?: 'muted' | 'enabled';
    }
    interface NContentData {
        /**
          * If set, disables auto-rendering of this instance. To fetch the contents change to false or remove attribute.
         */
        "deferLoad"?: boolean;
        /**
          * The data expression to obtain a value for rendering as inner-text for this element. {{session:user.name}}
          * @default null
         */
        "text"?: string;
    }
    interface NContentDataRepeat {
        /**
          * Turn on debug statements for load, update and render events.
         */
        "debug"?: boolean;
        /**
          * If set, disables auto-rendering of this instance. To fetch the contents change to false or remove attribute.
         */
        "deferLoad"?: boolean;
        /**
          * The JSONata query to filter the json items see <https://try.jsonata.org> for more info.
         */
        "filter"?: string;
        /**
          * The array-string or data expression to obtain a collection for rendering the template. {{session:cart.items}}
         */
        "items"?: string;
        /**
          * The URL to remote JSON collection to use for the items.
          * @example /data.json
         */
        "itemsSrc"?: string;
        /**
          * Force render with data & route changes.
         */
        "noCache"?: boolean;
        /**
          * A data-token predicate to advise this component when to render (useful if used in a dynamic route or if tokens are used in the 'src' attribute)
         */
        "when"?: string;
    }
    interface NContentInclude {
        /**
          * If set, disables auto-rendering of this instance. To fetch the contents change to false or remove attribute.
         */
        "deferLoad"?: boolean;
        /**
          * Cross Origin Mode
         */
        "mode"?: 'cors' | 'navigate' | 'no-cors' | 'same-origin';
        /**
          * Before rendering HTML, replace any data-tokens with their resolved values. This also commands this component to re-render it's HTML for data-changes. This can affect performance.
         */
        "resolveTokens"?: boolean;
        /**
          * Remote Template URL
         */
        "src": string;
        /**
          * A data-token predicate to advise this component when to render (useful if used in a dynamic route or if tokens are used in the 'src' attribute)
         */
        "when"?: string;
    }
    interface NContentMarkdown {
        /**
          * If set, disables auto-rendering of this instance. To fetch the contents change to false or remove attribute.
         */
        "deferLoad"?: boolean;
        /**
          * Cross Origin Mode
         */
        "mode"?: 'cors' | 'navigate' | 'no-cors' | 'same-origin';
        /**
          * Force render with data & route changes.
         */
        "noCache"?: boolean;
        /**
          * Before rendering HTML, replace any data-tokens with their resolved values. This also commands this component to re-render it's HTML for data-changes. This can affect performance.
         */
        "resolveTokens"?: boolean;
        /**
          * Remote Template URL
         */
        "src"?: string;
        /**
          * A data-token predicate to advise this component when to render (useful if used in a dynamic route or if tokens are used in the 'src' attribute)
         */
        "when"?: string;
    }
    interface NContentReference {
        /**
          * If set, disables auto-rendering of this instance. To fetch the contents change to false or remove attribute.
         */
        "deferLoad"?: boolean;
        /**
          * When inline the link/script tags are rendered in-place rather than added to the head.
         */
        "inline"?: boolean;
        /**
          * Import the script file as a module.
         */
        "module"?: boolean;
        /**
          * Declare the script only for use when modules aren't supported
         */
        "noModule"?: boolean;
        /**
          * This event is fired when the script and style elements are loaded or timed out. The value for each style and script will be true or false, for loaded or timedout, respectively.
         */
        "onReferenced"?: (event: CustomEvent<ReferenceCompleteResults>) => void;
        /**
          * The script file to reference.
         */
        "scriptSrc"?: string;
        /**
          * The css file to reference
         */
        "styleSrc"?: string;
        /**
          * Timeout (in milliseconds) to wait for the references to load.
         */
        "timeout"?: number;
    }
    interface NContentReveal {
        /**
          * How far the element moves in the animation (% of element width/height)
         */
        "animationDistance"?: string;
        /**
          * How long to delay the animation (ms)
         */
        "delay"?: number;
        /**
          * Direction the element moves when animating in
         */
        "direction"?: 'up' | 'down' | 'right' | 'left';
        /**
          * How long the animation runs (ms)
         */
        "duration"?: number;
        /**
          * How much of the element must be visible before it animates (% of element height)
         */
        "triggerDistance"?: string;
    }
    interface NContentShare {
        /**
          * Headline for the share
         */
        "headline"?: string;
        /**
          * The textual body of web share
         */
        "text"?: string;
        /**
          * The URL we are sharing
         */
        "url"?: string;
    }
    interface NContentShow {
        /**
          * The data expression to obtain a predicate for conditionally rendering the inner-contents of this element.
         */
        "when": string;
    }
    interface NData {
        /**
          * The wait-time, in milliseconds to wait for un-registered data providers found in an expression. This is to accommodate a possible lag between evaluation before the first view-do 'when' predicate an the registration process.
          * @system data
         */
        "providerTimeout"?: number;
    }
    interface NDataCookie {
        /**
          * Provider name to use in nent expressions.
         */
        "name"?: string;
        /**
          * This event is raised when the consents to cookies.
         */
        "onDidConsent"?: (event: CustomEvent<CookieConsent>) => void;
        /**
          * When skipConsent is true, the accept-cookies banner will not be displayed before accessing cookie-data.
         */
        "skipConsent"?: boolean;
    }
    interface NDataSession {
        /**
          * The key prefix to use in storage
         */
        "keyPrefix"?: string;
        /**
          * Provider name to use in nent expressions.
         */
        "name"?: string;
    }
    interface NDataStorage {
        /**
          * The key prefix to use in storage
         */
        "keyPrefix"?: string;
        /**
          * Provider name to use in nent expressions.
         */
        "name"?: string;
    }
    interface NElements {
    }
    interface NVideo {
        /**
          * To debug timed elements, set this value to true.
         */
        "debug"?: boolean;
        /**
          * Provide the element property name that holds the duration time in seconds. Default is duration
         */
        "durationProperty"?: string;
        /**
          * Provider the end event name. Default is ended
         */
        "endEvent"?: string;
        /**
          * Provide the element selector for the media object that can provide time-updates and media-end events.
         */
        "targetElement"?: string;
        /**
          * Provide the time-event name. Default is timeupdate
         */
        "timeEvent"?: string;
        /**
          * Provide the element property name that holds the current time in seconds. Default is currentTime
         */
        "timeProperty"?: string;
        /**
          * Normalized video event timer.
         */
        "timer"?: VideoTimer;
    }
    interface NVideoSwitch {
        /**
          * Any classes to add to the input-element directly.
         */
        "classes"?: string;
        /**
          * The data provider to store the audio-enabled state in.
         */
        "dataProvider"?: string;
        /**
          * The id field to add to the input-element directly.
         */
        "inputId"?: string;
    }
    interface NView {
        /**
          * Remote URL for this Route's content.
         */
        "contentSrc"?: string;
        /**
          * Turn on debug statements for load, update and render events.
         */
        "debug"?: boolean;
        /**
          * The url for this route should only be matched when it is exact.
         */
        "exact"?: boolean;
        /**
          * Cross Origin Mode if the content is pulled from a remote location
         */
        "mode"?: 'cors' | 'navigate' | 'no-cors' | 'same-origin';
        /**
          * The title for this view. This is prefixed before the app title configured in n-views
         */
        "pageTitle"?: string;
        /**
          * Before rendering remote HTML, replace any data-tokens with their resolved values. This also commands this component to re-render it's HTML for data-changes. This can affect performance.  IMPORTANT: ONLY WORKS ON REMOTE HTML
         */
        "resolveTokens"?: boolean;
        /**
          * Header height or offset for scroll-top on this view.
         */
        "scrollTopOffset"?: number;
        /**
          * Remote URL for this route's HTML. HTML from this URL will be not be assigned to any slot.  You can add slot='content' to any containers within this HTML if you have a mix of HTML for this exact-route and its children.
         */
        "src"?: string;
        /**
          * Navigation transition between routes. This is a CSS animation class.
         */
        "transition"?: string;
        /**
          * The url for this route, including the parent's routes.
         */
        "url": string;
    }
    interface NViewLink {
        /**
          * The class to add when this HREF is active in the browser
         */
        "activeClass"?: string;
        /**
          * Provide log messages for path matching.
         */
        "debug"?: boolean;
        /**
          * Only active on the exact href match, and not on child routes
         */
        "exact"?: boolean;
        /**
          * The destination route for this link
         */
        "href": string;
        /**
          * Only active on the exact href match using every aspect of the URL including parameters.
         */
        "strict"?: boolean;
    }
    interface NViewLinkList {
        /**
          * The active-class to use with the n-view-link components.
         */
        "activeClass"?: string;
        /**
          * Specify if the '/' route should be skipped in the list.
         */
        "excludeRoot"?: boolean;
        /**
          * The list-item-class to use with the li tag
         */
        "itemClass"?: string;
        /**
          * The list-class to use with the UL tag
         */
        "listClass"?: string;
        /**
          * The display mode for which routes to display.
         */
        "mode"?: 'children' | 'parents' | 'siblings';
        /**
          * The string separator to put between the items.
         */
        "separator"?: string;
    }
    interface NViewNotFound {
        /**
          * The title for this view. This is prefixed before the app title configured in n-views
         */
        "pageTitle"?: string;
        /**
          * Header height or offset for scroll-top on this view.
         */
        "scrollTopOffset"?: number;
        /**
          * Navigation transition between routes. This is a CSS animation class.
         */
        "transition"?: string;
    }
    interface NViewPrompt {
        /**
          * Remote URL for HTML content. Content from this URL will be assigned the 'content' slot.
         */
        "contentSrc"?: string;
        /**
          * To debug timed elements, set this value to true.
         */
        "debug"?: boolean;
        /**
          * The url for this route should only be matched when it is exact.
         */
        "exact"?: boolean;
        /**
          * Cross Origin Mode if the content is pulled from a remote location
         */
        "mode"?: 'cors' | 'navigate' | 'no-cors' | 'same-origin';
        /**
          * When this value exists, the page will automatically progress when the duration in seconds has passed.
         */
        "nextAfter"?: number | boolean;
        /**
          * The title for this view. This is prefixed before the app title configured in n-views
         */
        "pageTitle"?: string;
        /**
          * Before rendering remote HTML, replace any data-tokens with their resolved values. This also commands this component to re-render it's HTML for data-changes. This can affect performance.  IMPORTANT: ONLY WORKS ON REMOTE HTML
         */
        "resolveTokens"?: boolean;
        /**
          * Header height or offset for scroll-top on this view.
         */
        "scrollTopOffset"?: number;
        /**
          * Navigation transition between routes. This is a CSS animation class.
         */
        "transition"?: string;
        /**
          * The url for this route, including the parent's routes.
         */
        "url": string;
        /**
          * The visit strategy for this do. once: persist the visit and never force it again always: do not persist, but don't don't show again in-session optional: do not force this view-do ever. It will be available by URL
         */
        "visit"?: 'once' | 'always' | 'optional';
        /**
          * If present, the expression must evaluate to true for this route to be sequenced by the parent view. The existence of this value overrides the visit strategy
         */
        "when"?: string;
    }
    interface NViews {
        /**
          * This is the application / site title. If the views or dos have titles, this is added as a suffix.
         */
        "appTitle"?: string;
        /**
          * This is the root path that the actual page is, if it isn't '/', then the router needs to know where to begin creating paths.
         */
        "root"?: string;
        /**
          * Header height or offset for scroll-top on this and all views.
         */
        "scrollTopOffset"?: number;
        /**
          * This is the start path a user should land on when they first land on this app.
         */
        "startUrl"?: string;
        /**
          * Navigation transition between routes. This is a CSS animation class.
         */
        "transition"?: string;
    }
    interface IntrinsicElements {
        "n-action": NAction;
        "n-action-activator": NActionActivator;
        "n-analytics": NAnalytics;
        "n-app": NApp;
        "n-app-theme": NAppTheme;
        "n-app-theme-switch": NAppThemeSwitch;
        "n-audio": NAudio;
        "n-audio-action-music": NAudioActionMusic;
        "n-audio-action-music-load": NAudioActionMusicLoad;
        "n-audio-action-sound": NAudioActionSound;
        "n-audio-action-sound-load": NAudioActionSoundLoad;
        "n-audio-switch": NAudioSwitch;
        "n-content-data": NContentData;
        "n-content-data-repeat": NContentDataRepeat;
        "n-content-include": NContentInclude;
        "n-content-markdown": NContentMarkdown;
        "n-content-reference": NContentReference;
        "n-content-reveal": NContentReveal;
        "n-content-share": NContentShare;
        "n-content-show": NContentShow;
        "n-data": NData;
        "n-data-cookie": NDataCookie;
        "n-data-session": NDataSession;
        "n-data-storage": NDataStorage;
        "n-elements": NElements;
        "n-video": NVideo;
        "n-video-switch": NVideoSwitch;
        "n-view": NView;
        "n-view-link": NViewLink;
        "n-view-link-list": NViewLinkList;
        "n-view-not-found": NViewNotFound;
        "n-view-prompt": NViewPrompt;
        "n-views": NViews;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "n-action": LocalJSX.NAction & JSXBase.HTMLAttributes<HTMLNActionElement>;
            "n-action-activator": LocalJSX.NActionActivator & JSXBase.HTMLAttributes<HTMLNActionActivatorElement>;
            "n-analytics": LocalJSX.NAnalytics & JSXBase.HTMLAttributes<HTMLNAnalyticsElement>;
            "n-app": LocalJSX.NApp & JSXBase.HTMLAttributes<HTMLNAppElement>;
            "n-app-theme": LocalJSX.NAppTheme & JSXBase.HTMLAttributes<HTMLNAppThemeElement>;
            "n-app-theme-switch": LocalJSX.NAppThemeSwitch & JSXBase.HTMLAttributes<HTMLNAppThemeSwitchElement>;
            "n-audio": LocalJSX.NAudio & JSXBase.HTMLAttributes<HTMLNAudioElement>;
            "n-audio-action-music": LocalJSX.NAudioActionMusic & JSXBase.HTMLAttributes<HTMLNAudioActionMusicElement>;
            "n-audio-action-music-load": LocalJSX.NAudioActionMusicLoad & JSXBase.HTMLAttributes<HTMLNAudioActionMusicLoadElement>;
            "n-audio-action-sound": LocalJSX.NAudioActionSound & JSXBase.HTMLAttributes<HTMLNAudioActionSoundElement>;
            "n-audio-action-sound-load": LocalJSX.NAudioActionSoundLoad & JSXBase.HTMLAttributes<HTMLNAudioActionSoundLoadElement>;
            "n-audio-switch": LocalJSX.NAudioSwitch & JSXBase.HTMLAttributes<HTMLNAudioSwitchElement>;
            "n-content-data": LocalJSX.NContentData & JSXBase.HTMLAttributes<HTMLNContentDataElement>;
            "n-content-data-repeat": LocalJSX.NContentDataRepeat & JSXBase.HTMLAttributes<HTMLNContentDataRepeatElement>;
            "n-content-include": LocalJSX.NContentInclude & JSXBase.HTMLAttributes<HTMLNContentIncludeElement>;
            "n-content-markdown": LocalJSX.NContentMarkdown & JSXBase.HTMLAttributes<HTMLNContentMarkdownElement>;
            "n-content-reference": LocalJSX.NContentReference & JSXBase.HTMLAttributes<HTMLNContentReferenceElement>;
            "n-content-reveal": LocalJSX.NContentReveal & JSXBase.HTMLAttributes<HTMLNContentRevealElement>;
            "n-content-share": LocalJSX.NContentShare & JSXBase.HTMLAttributes<HTMLNContentShareElement>;
            "n-content-show": LocalJSX.NContentShow & JSXBase.HTMLAttributes<HTMLNContentShowElement>;
            "n-data": LocalJSX.NData & JSXBase.HTMLAttributes<HTMLNDataElement>;
            "n-data-cookie": LocalJSX.NDataCookie & JSXBase.HTMLAttributes<HTMLNDataCookieElement>;
            "n-data-session": LocalJSX.NDataSession & JSXBase.HTMLAttributes<HTMLNDataSessionElement>;
            "n-data-storage": LocalJSX.NDataStorage & JSXBase.HTMLAttributes<HTMLNDataStorageElement>;
            "n-elements": LocalJSX.NElements & JSXBase.HTMLAttributes<HTMLNElementsElement>;
            "n-video": LocalJSX.NVideo & JSXBase.HTMLAttributes<HTMLNVideoElement>;
            "n-video-switch": LocalJSX.NVideoSwitch & JSXBase.HTMLAttributes<HTMLNVideoSwitchElement>;
            "n-view": LocalJSX.NView & JSXBase.HTMLAttributes<HTMLNViewElement>;
            "n-view-link": LocalJSX.NViewLink & JSXBase.HTMLAttributes<HTMLNViewLinkElement>;
            "n-view-link-list": LocalJSX.NViewLinkList & JSXBase.HTMLAttributes<HTMLNViewLinkListElement>;
            "n-view-not-found": LocalJSX.NViewNotFound & JSXBase.HTMLAttributes<HTMLNViewNotFoundElement>;
            "n-view-prompt": LocalJSX.NViewPrompt & JSXBase.HTMLAttributes<HTMLNViewPromptElement>;
            "n-views": LocalJSX.NViews & JSXBase.HTMLAttributes<HTMLNViewsElement>;
        }
    }
}
